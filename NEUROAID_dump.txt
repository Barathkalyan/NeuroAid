# File: app.py
```py
from flask import Flask, render_template, request, redirect, url_for, session, g, jsonify
from supabase import create_client, Client
import bcrypt
import logging
import requests
from datetime import datetime, timedelta
import time
from zoneinfo import ZoneInfo
import uuid
import pyotp
import qrcode
from io import BytesIO
import base64
import os

app = Flask(__name__)
app.secret_key = os.getenv('FLASK_SECRET_KEY', 'your-secret-key')
app.config['PERMANENT_SESSION_LIFETIME'] = timedelta(minutes=30)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Supabase configuration
SUPABASE_URL = os.getenv('SUPABASE_URL', 'https://kkzymljvdzbydqugbwuw.supabase.co')
SUPABASE_ANON_KEY = os.getenv('SUPABASE_ANON_KEY', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImtrenltbGp2ZHpieWRxdWdid3V3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ5OTcyMzgsImV4cCI6MjA2MDU3MzIzOH0.d6Xb4PrfYlcilkLOGWbPIG2WZ2c2rocZZEKCojwWfgs')
SUPABASE_SERVICE_KEY = os.getenv('SUPABASE_SERVICE_KEY', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImtrenltbGp2ZHpieWRxdWdid3V3Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0NDk5NzIzOCwiZXhwIjoyMDYwNTczMjM4fQ.yuRT1q-FigehZoeFccdP_zk4m5sgHulpbg_us1IgpRw')  # Replace with actual service role key
HF_API_KEY = os.getenv('HF_API_KEY', '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')

# Initialize Supabase clients
supabase_anon: Client = create_client(SUPABASE_URL, SUPABASE_ANON_KEY)
supabase_service: Client = create_client(SUPABASE_URL, SUPABASE_SERVICE_KEY)

logger.info("Supabase clients initialized: anon_key and service_key")

def query_huggingface(model: str, payload: dict, retries=3, backoff_factor=1):
    headers = {"Authorization": f"Bearer {HF_API_KEY}"}
    url = f"https://api-inference.huggingface.co/models/{model}"
    for attempt in range(retries):
        try:
            response = requests.post(url, headers=headers, json=payload)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.HTTPError as e:
            if response.status_code == 429:
                wait_time = backoff_factor * (2 ** attempt)
                logger.warning(f"Rate limit hit, retrying in {wait_time}s (attempt {attempt+1}/{retries})")
                time.sleep(wait_time)
                continue
            logger.error(f"HTTPError calling model '{model}': {e}, Response: {response.text}")
            return None
        except Exception as e:
            logger.error(f"Unexpected error calling model '{model}': {e}")
            return None
    logger.error(f"Failed to query model '{model}' after {retries} retries")
    return None

def simple_keyword_analysis(text):
    text = text.lower()
    emotions = []
    if any(word in text for word in ['sad', 'unhappy', 'down', 'depressed']):
        emotions.append({"label": "sadness", "score": 0.7})
    if any(word in text for word in ['angry', 'mad', 'frustrated', 'annoyed']):
        emotions.append({"label": "anger", "score": 0.7})
    if any(word in text for word in ['happy', 'joyful', 'great', 'amazing']):
        emotions.append({"label": "joy", "score": 0.7})
    if any(word in text for word in ['anxious', 'nervous', 'worried', 'scared']):
        emotions.append({"label": "anxiety", "score": 0.7})
    if not emotions:
        emotions.append({"label": "neutral", "score": 0.5})
    return emotions

def derive_mood_from_emotions(emotions):
    if not emotions:
        return 3, 0.5

    positive_emotions = ['joy', 'love', 'gratitude', 'hope', 'pride', 'amusement', 'optimism']
    negative_emotions = ['sadness', 'anger', 'fear', 'disgust', 'shame', 'frustration', 'anxiety']
    neutral_emotions = ['neutral', 'confusion', 'surprise']

    top_emotion = max(emotions, key=lambda x: x['score'])
    emotion_label = top_emotion['label']
    confidence = top_emotion['score']

    if emotion_label in positive_emotions:
        mood_score = 5 if confidence > 0.7 else 4
    elif emotion_label in negative_emotions:
        mood_score = 1 if confidence > 0.7 else 2
    else:
        mood_score = 3
    return mood_score, confidence

def get_recent_emotions(supabase, user_id, days=7):
    start_date = (datetime.now(ZoneInfo("UTC")) - timedelta(days=days)).isoformat()
    try:
        query = supabase.table('journal_entries')\
            .select('analysis->emotions')\
            .eq('user_id', user_id)\
            .gt('created_at', start_date)\
            .limit(50)\
            .execute()
        all_emotions = []
        for entry in query.data:
            emotions = entry['emotions'] if 'emotions' in entry else []
            all_emotions.extend([e['label'] for e in emotions if e['score'] > 0.3])
        emotion_counts = {}
        for emotion in all_emotions:
            emotion_counts[emotion] = emotion_counts.get(emotion, 0) + 1
        return emotion_counts
    except Exception as e:
        logger.error(f"Error fetching recent emotions: {str(e)}")
        return {}

def get_journaling_frequency(supabase, user_id, days=7):
    start_date = (datetime.now(ZoneInfo("UTC")) - timedelta(days=days)).isoformat()
    try:
        entries = supabase.table('journal_entries')\
            .select('created_at')\
            .eq('user_id', user_id)\
            .gt('created_at', start_date)\
            .execute()
        return len(entries.data)
    except Exception as e:
        logger.error(f"Error calculating journaling frequency: {str(e)}")
        return 0

def generate_suggestion(emotions, mood, supabase, user_id):
    if not emotions:
        return ["Try writing more to help me understand your feelings."]

    top_emotions = sorted(emotions, key=lambda x: x['score'], reverse=True)[:2]
    primary_emotion = top_emotions[0]['label']
    primary_score = top_emotions[0]['score']
    secondary_emotion = top_emotions[1]['label'] if len(top_emotions) > 1 else None

    recent_emotions = get_recent_emotions(supabase, user_id)
    journaling_freq = get_journaling_frequency(supabase, user_id)

    tone = "I’m sorry to hear" if mood <= 2 else "I can see" if mood == 3 else "It’s great to hear"

    suggestions = []

    if primary_emotion in ['disappointment', 'sadness']:
        suggestions.append(f"{tone} you’re feeling {primary_emotion.lower()}. Write about what’s been challenging.")
        if secondary_emotion in ['anger', 'annoyance']:
            suggestions.append(f"Try a quick stretch to channel that {secondary_emotion.lower()}.")
    elif primary_emotion in ['anger', 'frustration', 'annoyance']:
        suggestions.append(f"{tone} you’re feeling {primary_emotion.lower()}. Take a few deep breaths.")
    elif primary_emotion in ['fear', 'anxiety']:
        suggestions.append(f"{tone} you’re feeling {primary_emotion.lower()}. Focus on 5 things you can see.")
    elif primary_emotion in ['joy', 'gratitude', 'hope', 'love']:
        suggestions.append(f"{tone} you’re feeling {primary_emotion.lower()}! Do something you love.")
    else:
        suggestions.append(f"{tone} you’re feeling {primary_emotion.lower()}. Write more to explore.")

    if journaling_freq < 3:
        suggestions.append("Journal daily to connect with your emotions.")
    return suggestions[:3]

def analyze_journal_entry(text, supabase, user_id):
    emotion_result = query_huggingface("SamLowe/roberta-base-go_emotions", {"inputs": text})

    emotions = []
    if emotion_result:
        if isinstance(emotion_result, list) and len(emotion_result) > 0:
            first = emotion_result[0]
            if isinstance(first, list):
                emotions = [{"label": e['label'], "score": e['score']} for e in first if isinstance(e, dict)]
            elif isinstance(first, dict):
                emotions = [{"label": first['label'], "score": first['score']}]
    else:
        logger.warning("Hugging Face API failed, using keyword analysis")
        emotions = simple_keyword_analysis(text)

    mood_score, confidence = derive_mood_from_emotions(emotions)
    suggestions = generate_suggestion(emotions, mood_score, supabase, user_id)

    return {
        "mood": mood_score,
        "emotions": emotions,
        "suggestions": suggestions,
        "confidence": confidence
    }

def get_supabase(use_service_role=False):
    if use_service_role:
        if 'supabase_service' not in g:
            g.supabase_service = supabase_service
        return g.supabase_service
    else:
        if 'supabase_anon' not in g:
            g.supabase_anon = supabase_anon
        return g.supabase_anon
    
def get_user_dropdown_data(supabase, user_id):
    try:
        # Fetch email and created_date from users table
        user_data = supabase.table('users')\
            .select('email, created_date')\
            .eq('id', user_id)\
            .limit(1)\
            .execute()
        
        # Fetch name from profiles table
        profile_data = supabase.table('profiles')\
            .select('name')\
            .eq('user_id', user_id)\
            .limit(1)\
            .execute()
        
        user_name = profile_data.data[0]['name'] if profile_data.data and profile_data.data[0]['name'] else 'Unknown'
        email = user_data.data[0]['email'] if user_data.data else 'Not found'
        created_date = user_data.data[0]['created_date'] if user_data.data and user_data.data[0]['created_date'] else '2025-01-01'
        
        # Format created_date
        if created_date:
            if '.' in created_date:
                created_date = created_date.split('.')[0] + '+00:00'
            else:
                created_date = created_date.replace('Z', '+00:00')
            formatted_date = datetime.fromisoformat(created_date).astimezone(ZoneInfo("Asia/Kolkata")).strftime('%B %d, %Y')
        else:
            formatted_date = 'January 01, 2025'
        
        return {
            'user_name': user_name,
            'user_email': email,
            'joined_date': formatted_date
        }
    except Exception as e:
        logger.error(f"Error fetching dropdown data for user {user_id}: {str(e)}")
        return {
            'user_name': 'Unknown',
            'user_email': 'Not found',
            'joined_date': 'January 01, 2025'
        }

@app.teardown_appcontext
def teardown_supabase(exception):
    if 'supabase_anon' in g:
        g.pop('supabase_anon')
    if 'supabase_service' in g:
        g.pop('supabase_service')

@app.before_request
def make_session_permanent():
    session.permanent = True
    if 'user' in session and 'last_activity' in session:
        last_activity = datetime.fromisoformat(session['last_activity'])
        if (datetime.now(ZoneInfo("UTC")) - last_activity) > app.config['PERMANENT_SESSION_LIFETIME']:
            session.pop('user', None)
            session.pop('user_email', None)
            session.pop('access_token', None)
            session.pop('last_activity', None)
            session.pop('two_factor_enabled', None)
            session.pop('2fa_verified', None)
            logger.info("Session expired, user logged out.")
            return redirect(url_for('login'))
    if 'user' in session:
        session['last_activity'] = datetime.now(ZoneInfo("UTC")).isoformat()

@app.route('/api/mood_data', methods=['GET'])
def get_mood_data():
    if 'user' not in session:
        return jsonify({'error': 'Unauthorized'}), 401
    supabase = get_supabase()
    user_id = session['user']
    start_date = (datetime.now(ZoneInfo("UTC")) - timedelta(days=7)).isoformat()
    try:
        entries = supabase.table('journal_entries')\
            .select('analysis, created_at')\
            .eq('user_id', user_id)\
            .gt('created_at', start_date)\
            .order('created_at', desc=False)\
            .execute()
        logger.info(f"Fetched {len(entries.data)} journal entries for user {user_id}")

        end_date = datetime.now(ZoneInfo("UTC")).replace(hour=23, minute=59, second=59, microsecond=999999)
        current_date = (end_date - timedelta(days=6)).replace(hour=0, minute=0, second=0, microsecond=0)
        labels = []
        mood_data = []
        confidence_data = []
        date_map = {}

        for i in range(7):
            date_str = current_date.strftime('%Y-%m-%d')
            labels.append(current_date.strftime('%b %d'))
            date_map[date_str] = {'moods': [], 'confidences': []}
            current_date += timedelta(days=1)

        for entry in entries.data:
            created_at = entry['created_at']
            if '.' in created_at:
                created_at = created_at.split('.')[0] + '+00:00'
            else:
                created_at = created_at.replace('Z', '+00:00')
            date = datetime.fromisoformat(created_at).replace(tzinfo=ZoneInfo("UTC"))
            date_str = date.strftime('%Y-%m-%d')
            if date_str in date_map:
<<<<<<< HEAD
                mood = entry['analysis'].get('mood', 3)
                confidence = entry['analysis'].get('confidence', 0.0)
                date_map[date_str]['moods'].append(mood)
                date_map[date_str]['confidences'].append(confidence)
                logger.info(f"Entry date: {date}, Mood: {mood}, Confidence: {confidence}")
=======
                mood = entry['analysis'].get('mood', 3) if entry.get('analysis') else 3
                confidence = entry['analysis'].get('confidence', 0.0) if entry.get('analysis') else 0.0
                date_map[date_str]['moods'].append(mood)
                date_map[date_str]['confidences'].append(confidence)
>>>>>>> 47dab7869e18a249a402adc883d747a3309ddb81

        for date_str in date_map:
            moods = date_map[date_str]['moods']
            confidences = date_map[date_str]['confidences']
            avg_mood = sum(moods) / len(moods) if moods else 0
            avg_mood = sum(moods) / len(moods) if moods else 3
            avg_confidence = sum(confidences) / len(confidences) if confidences else 0
            mood_data.append(round(avg_mood, 2))
            confidence_data.append(round(avg_confidence, 2))

        if not any(mood_data):
            labels = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']
            mood_data = [3] * 7
            confidence_data = [0] * 7

        all_entries = supabase.table('journal_entries')\
            .select('created_at')\
            .eq('user_id', user_id)\
            .order('created_at', desc=True)\
            .execute()

        streak = 0
        current_date = datetime.now(ZoneInfo("UTC")).replace(hour=0, minute=0, second=0, microsecond=0)
        entry_dates = set()

        for entry in all_entries.data:
            created_at = entry['created_at']
            if '.' in created_at:
                created_at = created_at.split('.')[0] + '+00:00'
            else:
                created_at = created_at.replace('Z', '+00:00')
            entry_date = datetime.fromisoformat(created_at).replace(tzinfo=ZoneInfo("UTC"))
            entry_date = entry_date.replace(hour=0, minute=0, second=0, microsecond=0)
            entry_dates.add(entry_date)

        while True:
            if current_date in entry_dates:
                streak += 1
                current_date -= timedelta(days=1)
            else:
                break
        while current_date in entry_dates:
            streak += 1
            current_date -= timedelta(days=1)

        logger.info(f"Calculated journal streak for user {user_id}: {streak} days")

        return jsonify({
            'labels': labels,
            'data': mood_data,
            'numEntries': len(entries.data),
            'streak': streak,
            'confidence': confidence_data
        })
    except Exception as e:
        logger.error(f"Error fetching mood data: {str(e)}")
        return jsonify({'error': str(e)}), 500
        return jsonify({
            'labels': ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
            'data': [3] * 7,
            'numEntries': 0,
            'streak': 0,
            'confidence': [0] * 7
        }), 200

@app.route('/api/gratitude', methods=['GET', 'POST'])
def handle_gratitude():
    if 'user' not in session:
        logger.warning("User not authenticated for /api/gratitude")
        return jsonify({'error': 'Unauthorized'}), 401

    supabase = get_supabase()
    user_id = session['user']

    if request.method == 'POST':
        try:
            data = request.get_json()
            thing1 = data.get('thing1')
            thing2 = data.get('thing2')
            thing3 = data.get('thing3')

            if not thing1 or not thing2 or not thing3:
                return jsonify({'success': False, 'error': 'All fields are required'}), 400

            gratitude_entry = {
                'user_id': user_id,
                'thing1': thing1,
                'thing2': thing2,
                'thing3': thing3,
                'created_at': datetime.now(ZoneInfo("UTC")).isoformat()
            }

            supabase.table('gratitude_entries').insert(gratitude_entry).execute()
            logger.info(f"Gratitude entry saved for user_id: {user_id}")
            return jsonify({'success': True}), 200
        except Exception as e:
            logger.error(f"Error saving gratitude entry: {str(e)}")
            return jsonify({'success': False, 'error': str(e)}), 500

    else:
        try:
            entries = supabase.table('gratitude_entries')\
                .select('thing1, thing2, thing3, created_at')\
                .eq('user_id', user_id)\
                .order('created_at', desc=True)\
                .execute()

            formatted_entries = []
            for entry in entries.data:
                created_at_str = entry['created_at']
                if '.' in created_at_str:
                    created_at_str = created_at_str.split('.')[0] + '+00:00'
                else:
                    created_at_str = created_at_str.replace('Z', '+00:00')
                entry_date = datetime.fromisoformat(created_at_str).replace(tzinfo=ZoneInfo("UTC"))
                entry_date_ist = entry_date.astimezone(ZoneInfo("Asia/Kolkata"))
                formatted_entries.append({
                    'thing1': entry['thing1'],
                    'thing2': entry['thing2'],
                    'thing3': entry['thing3'],
                    'date': entry_date_ist.strftime('%B %d, %Y')
                })

            all_entries = supabase.table('gratitude_entries')\
                .select('created_at')\
                .eq('user_id', user_id)\
                .order('created_at', desc=True)\
                .execute()

            streak = 0
            current_date = datetime.now(ZoneInfo("UTC")).replace(hour=0, minute=0, second=0, microsecond=0)
            entry_dates = set()

            for entry in all_entries.data:
                created_at = entry['created_at']
                if '.' in created_at:
                    created_at = created_at.split('.')[0] + '+00:00'
                else:
                    created_at = created_at.replace('Z', '+00:00')
                entry_date = datetime.fromisoformat(created_at).replace(tzinfo=ZoneInfo("UTC"))
                entry_date = entry_date.replace(hour=0, minute=0, second=0, microsecond=0)
                entry_dates.add(entry_date)

            while True:
                if current_date in entry_dates:
                    streak += 1
                    current_date -= timedelta(days=1)
                else:
                    break

            logger.info(f"Calculated gratitude streak for user {user_id}: {streak} days")

            return jsonify({
                'entries': formatted_entries,
                'streak': streak
            })
        except Exception as e:
            logger.error(f"Error fetching gratitude entries: {str(e)}")
            return jsonify({'error': str(e)}), 500

@app.route('/api/recommend_music', methods=['GET'])
def recommend_music():
    if 'user' not in session:
        logger.warning("User not authenticated for /api/recommend_music")
        return jsonify({'error': 'Unauthorized'}), 401

    supabase = get_supabase()
    user_id = session['user']
    date = request.args.get('date')

    try:
        query = supabase.table('journal_entries')\
            .select('analysis->mood')\
            .eq('user_id', user_id)
        
        if date:
            try:
                start_date = datetime.fromisoformat(date.replace('Z', '+00:00')).replace(tzinfo=ZoneInfo("UTC"))
                end_date = start_date.replace(hour=23, minute=59, second=59, microsecond=999999)
                query = query.gte('created_at', start_date.isoformat()).lte('created_at', end_date.isoformat())
            except ValueError:
                logger.error(f"Invalid date format: {date}")
                return jsonify({'error': 'Invalid date format. Use YYYY-MM-DD'}), 400
        
        query = query.order('created_at', desc=True).limit(1)
        entries = query.execute()
        
        mood = entries.data[0]['mood'] if entries.data else 3
        
        preferences = supabase.table('user_preferences')\
            .select('language')\
            .eq('user_id', user_id)\
            .execute()
        language = preferences.data[0]['language'] if preferences.data else 'tamil'

        MOOD_PLAYLISTS = {
    'tamil': {
        1: 'https://open.spotify.com/embed/playlist/37i9dQZF1DWX3SoTqhs2rq',
        2: 'https://open.spotify.com/embed/playlist/37i9dQZF1DWVV27DiNWxkR',
        3: 'https://open.spotify.com/embed/playlist/37i9dQZF1DWXz6ZFxA5jKQ',
        4: 'https://open.spotify.com/embed/playlist/2Yra1CyIYaJ2YNz49yjh4i',
        5: 'https://open.spotify.com/embed/playlist/37i9dQZF1DWUnAwRxD2pxH'
    },
    'english': {
        1: 'https://open.spotify.com/embed/playlist/37i9dQZF1DX9sIqqvKsjG8',
        2: 'https://open.spotify.com/embed/playlist/37i9dQZF1DX3rxVfibe1L0',
        3: 'https://open.spotify.com/embed/playlist/37i9dQZF1DX0BcQWzuB7ZO',
        4: 'https://open.spotify.com/embed/playlist/37i9dQZF1DXcBWIGoYBM5M',
        5: 'https://open.spotify.com/embed/playlist/37i9dQZF1DWUa8ZRTfalSI'
    },
    'hindi': {
        1: 'https://open.spotify.com/embed/playlist/37i9dQZF1DWYkaDif7Ztbp',
        2: 'https://open.spotify.com/embed/playlist/37i9dQZF1DWUVpAXiEPK8P',
        3: 'https://open.spotify.com/embed/playlist/37i9dQZF1DX4dyzvuaRJ0n',
        4: 'https://open.spotify.com/embed/playlist/37i9dQZF1DX4SBhb3fqCJd',
        5: 'https://open.spotify.com/embed/playlist/37i9dQZF1DX4ZrmoTDh6zJ'
    },
    'telugu': {
        1: 'https://open.spotify.com/embed/playlist/37i9dQZF1DWXLeA8Omikj7',
        2: 'https://open.spotify.com/embed/playlist/37i9dQZF1DXapHi7gXtXo2',
        3: 'https://open.spotify.com/embed/playlist/37i9dQZF1DXdbXrPNafg9d',
        4: 'https://open.spotify.com/embed/playlist/37i9dQZF1DXaKIA8E7WcJj',
        5: 'https://open.spotify.com/embed/playlist/37i9dQZF1DWXi7h5CniH97'
    },
    'malayalam': {
        1: 'https://open.spotify.com/embed/playlist/37i9dQZF1DWWhB4HOWKFQc',
        2: 'https://open.spotify.com/embed/playlist/37i9dQZF1DX6KYgZMe25iS',
        3: 'https://open.spotify.com/embed/playlist/37i9dQZF1DXbqXxdO1a3nX',
        4: 'https://open.spotify.com/embed/playlist/37i9dQZF1DWZz8QXaU2aX5',
        5: 'https://open.spotify.com/embed/playlist/37i9dQZF1DWVoDnLC9PqaD'
    },
    'kannada': {
        1: 'https://open.spotify.com/embed/playlist/37i9dQZF1DWXh3XHYZ7Sx1',
        2: 'https://open.spotify.com/embed/playlist/37i9dQZF1DX33aWnYYWvdf',
        3: 'https://open.spotify.com/embed/playlist/37i9dQZF1DWVXaB8Ox0zRJ',
        4: 'https://open.spotify.com/embed/playlist/37i9dQZF1DXe3a8d5bfgGk',
        5: 'https://open.spotify.com/embed/playlist/37i9dQZF1DWUTJW8w3JNz2'
    }
}

        playlist_url = MOOD_PLAYLISTS.get(language, MOOD_PLAYLISTS['tamil']).get(mood)
        
        if not playlist_url:
            logger.error(f"No playlist found for mood {mood} and language {language}")
            return jsonify({'error': 'No playlist available for this mood and language'}), 404

        return jsonify({'embedUrl': playlist_url, 'mood': mood}), 200

    except Exception as e:
        logger.error(f"Error recommending Spotify playlist: {str(e)}")
        return jsonify({'error': 'Internal server error'}), 500

@app.route('/api/update_language', methods=['GET', 'POST'])
def update_language():
    if 'user' not in session:
        logger.warning("User not authenticated for /api/update_language")
        return jsonify({'error': 'Unauthorized'}), 401

    supabase = get_supabase()
    user_id = session['user']

    if request.method == 'GET':
        try:
            preferences = supabase.table('user_preferences')\
                .select('language')\
                .eq('user_id', user_id)\
                .execute()
            language = preferences.data[0]['language'] if preferences.data else 'tamil'
            return jsonify({'language': language}), 200
        except Exception as e:
            logger.error(f"Error fetching user language: {str(e)}")
            return jsonify({'error': 'Failed to fetch language'}), 500
                                  
    try:
        data = request.get_json()
        language = data.get('language', 'tamil')
        valid_languages = ['tamil', 'hindi', 'telugu', 'malayalam', 'kannada', 'english']
        if language not in valid_languages:
            return jsonify({'error': 'Invalid language'}), 400

        supabase.table('user_preferences').update({'language': language}).eq('user_id', user_id).execute()
        logger.info(f"Language updated to {language} for user {user_id}")
        return jsonify({'success': True}), 200
    except Exception as e:
        logger.error(f"Error updating language: {str(e)}")
        return jsonify({'error': 'Failed to update language'}), 500

@app.route('/setup_2fa', methods=['GET', 'POST'])
def setup_2fa():
    if 'user' not in session:
        return redirect(url_for('login'))
    
    supabase = get_supabase()
    user_id = session['user']
    
    if request.method == 'POST':
        try:
            totp = pyotp.TOTP(pyotp.random_base32())
            secret = totp.secret
            supabase.table('user_preferences').update({
                'two_factor_secret': secret,
                'two_factor_enabled': True
            }).eq('user_id', user_id).execute()
            
            provisioning_uri = totp.provisioning_uri(
                name=session['user_email'],
                issuer_name='NeuroAid'
            )
            
            img = qrcode.make(provisioning_uri)
            buffered = BytesIO()
            img.save(buffered)
            qr_code = base64.b64encode(buffered.getvalue()).decode('utf-8')
            
            return render_template('setup_2fa.html', qr_code=qr_code, secret=secret)
        except Exception as e:
            logger.error(f"Error setting up 2FA: {str(e)}")
            supabase.table('user_preferences').update({
                'two_factor_enabled': False,
                'two_factor_secret': None
            }).eq('user_id', user_id).execute()
            session['two_factor_enabled'] = False
            return render_template('setup_2fa.html', error="Failed to set up 2FA. Please try again.")
    
    try:
        preferences = supabase.table('user_preferences')\
            .select('two_factor_secret')\
            .eq('user_id', user_id)\
            .execute()
        
        if preferences.data and preferences.data[0].get('two_factor_secret'):
            return redirect(url_for('verify_2fa'))
        
        return render_template('setup_2fa.html')
    except Exception as e:
        logger.error(f"Error checking 2FA setup: {str(e)}")
        return render_template('setup_2fa.html', error="Error checking 2FA status.")

@app.route('/verify_2fa', methods=['GET', 'POST'])
def verify_2fa():
    if 'user' not in session:
        return redirect(url_for('login'))
    
    supabase = get_supabase()
    user_id = session['user']
    
    if request.method == 'POST':
        try:
            code = request.form.get('code')
            preferences = supabase.table('user_preferences')\
                .select('two_factor_secret')\
                .eq('user_id', user_id)\
                .execute()
            
            if not preferences.data or not preferences.data[0].get('two_factor_secret'):
                return render_template('verify_2fa.html', error="2FA not set up.")
            
            secret = preferences.data[0]['two_factor_secret']
            totp = pyotp.TOTP(secret)
            
            if totp.verify(code):
                session['2fa_verified'] = True
                return redirect(url_for('index'))
            else:
                return render_template('verify_2fa.html', error="Invalid 2FA code.")
        except Exception as e:
            logger.error(f"Error verifying 2FA: {str(e)}")
            return render_template('verify_2fa.html', error="Error verifying 2FA code.")
    
    try:
        preferences = supabase.table('user_preferences')\
            .select('two_factor_enabled, two_factor_secret')\
            .eq('user_id', user_id)\
            .execute()
        
        if not preferences.data or not preferences.data[0].get('two_factor_enabled') or not preferences.data[0].get('two_factor_secret'):
            supabase.table('user_preferences').update({
                'two_factor_enabled': False,
                'two_factor_secret': None
            }).eq('user_id', user_id).execute()
            session['two_factor_enabled'] = False
            return redirect(url_for('index'))
        
        return render_template('verify_2fa.html')
    except Exception as e:
        logger.error(f"Error checking 2FA status on verify: {str(e)}")
        return render_template('verify_2fa.html', error="Error checking 2FA status.")

@app.route('/', methods=['GET', 'POST'])
def login():
    error = None
    if request.method == 'POST':
        email = request.form.get('email')
        password = request.form.get('password')
        if not email or not password:
            error = 'Email and password are required.'
            return render_template('login.html', error=error), 400
        
        # Normalize email to lowercase for the query
        email = email.strip().lower()
        logger.info(f"Attempting login for email: {email}")
        
        # Use service role to bypass RLS for login
        supabase = get_supabase(use_service_role=True)
        try:
            user_response = supabase.table('users').select('id, email, password').eq('email', email).execute()
            logger.info(f"Supabase query response for email {email}: {user_response.data}")
            
            if not user_response.data:
                error = 'User not found.'
                return render_template('login.html', error=error), 401
            
            user = user_response.data[0]
            stored_password = user['password'].encode('utf-8')
            if bcrypt.checkpw(password.encode('utf-8'), stored_password):
                session['user'] = str(user['id'])
                session['user_email'] = email
                session['last_activity'] = datetime.now(ZoneInfo("UTC")).isoformat()
                try:
                    preferences = supabase.table('user_preferences')\
                        .select('theme, two_factor_enabled, two_factor_secret')\
                        .eq('user_id', user['id'])\
                        .execute()
                    session['theme'] = preferences.data[0].get('theme', 'light') if preferences.data else 'light'
                    two_factor_enabled = preferences.data[0].get('two_factor_enabled', False) if preferences.data else False
                    two_factor_secret = preferences.data[0].get('two_factor_secret') if preferences.data else None
                    session['two_factor_enabled'] = two_factor_enabled
                    if two_factor_enabled and two_factor_secret:
                        return redirect(url_for('verify_2fa'))
                    logger.info(f"User {email} logged in successfully, user_id: {user['id']}, theme: {session['theme']}")
                    return redirect(url_for('index'))
                except Exception as e:
                    logger.error(f"Error fetching user preferences: {str(e)}")
                    session['theme'] = 'light'
                    session['two_factor_enabled'] = False
                    logger.info(f"User {email} logged in with default preferences, user_id: {user['id']}")
                    return redirect(url_for('index'))
            else:
                error = 'Invalid credentials.'
                return render_template('login.html', error=error), 401
        except Exception as e:
            error = 'Unable to log in right now. Please try again later.'
            logger.error(f"Login error: {str(e)}")
            return render_template('login.html', error=error), 500
    return render_template('login.html', error=error)

@app.route('/signup', methods=['GET', 'POST'])
def signup():
    error = None
    if request.method == 'POST':
        email = request.form.get('email')
        password = request.form.get('password')
        confirm_password = request.form.get('confirm_password')

        if not email or not password or not confirm_password:
            error = 'Email, password, and confirm password are required.'
            return render_template('signup.html', error=error), 400

        if password != confirm_password:
            error = 'Passwords do not match!'
            return render_template('signup.html', error=error), 400

        # Normalize email to lowercase during signup
        email = email.strip().lower()
        logger.info(f"Attempting signup for email: {email}")

        # Use service role for signup to bypass RLS
        supabase = get_supabase(use_service_role=True)
        try:
            existing_user = supabase.table('users').select('id').eq('email', email).execute()
            if existing_user.data:
                error = 'Email already exists.'
                return render_template('signup.html', error=error), 400

            user_id = str(uuid.uuid4())
            hashed_password = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')
            user_data = {'id': user_id, 'email': email, 'password': hashed_password}
            supabase.table('users').insert(user_data).execute()

            preferences_data = {
                'user_id': user_id,
                'two_factor_enabled': False,
                'two_factor_secret': None,
                'theme': 'light',
                'reminder_time': '09:00',
                'notification_preference': 'email'
            }
            supabase.table('user_preferences').insert(preferences_data).execute()

            logger.info(f"User {email} signed up successfully with user_id: {user_id}")
            return redirect(url_for('login'))
        except Exception as e:
            error = 'Unable to sign up right now. Please try again later.'
            logger.error(f"Signup error: {str(e)}")
            return render_template('signup.html', error=error), 400

    return render_template('signup.html', error=error)

@app.route('/index')
def index():
    if 'user' not in session:
        logger.info("User not logged in, redirecting to login.")
        return redirect(url_for('login'))

    if session.get('two_factor_enabled') and not session.get('2fa_verified'):
        return redirect(url_for('verify_2fa'))

    supabase = get_supabase()
    user_id = session['user']
    logger.info(f"Fetching data for user_id: {user_id}")

    utc_now = datetime.now(ZoneInfo("UTC"))
    ist_now = utc_now.astimezone(ZoneInfo("Asia/Kolkata"))
    today_start = utc_now.replace(hour=0, minute=0, second=0, microsecond=0).isoformat()
    today_end = utc_now.replace(hour=23, minute=59, second=59, microsecond=999999).isoformat()

    suggestions = None
    recent_entries_data = []

    try:
        latest_entry_query = supabase.table('journal_entries')\
            .select('created_at, analysis')\
            .eq('user_id', user_id)\
            .order('created_at', desc=True)\
            .limit(1)
        latest_entry = latest_entry_query.execute()

        if latest_entry.data:
            created_at_str = latest_entry.data[0]['created_at']
            if '.' in created_at_str:
                created_at_str = created_at_str.split('.')[0] + '+00:00'
            else:
                created_at_str = created_at_str.replace('Z', '+00:00')
            entry_date = datetime.fromisoformat(created_at_str).replace(tzinfo=ZoneInfo("UTC"))
            entry_date_ist = entry_date.astimezone(ZoneInfo("Asia/Kolkata"))
            current_date_ist = ist_now.date()

            if entry_date_ist.date() == current_date_ist:
                suggestions = latest_entry.data[0]['analysis'].get('suggestions', [])
            else:
                suggestions = ["Write a journal entry for today!"]
        else:
            suggestions = ["Write a journal entry to get suggestions!"]

        recent_entries_query = supabase.table('journal_entries')\
            .select('id, content, created_at')\
            .eq('user_id', user_id)\
            .order('created_at', desc=True)\
            .limit(3)
        recent_entries = recent_entries_query.execute()

        recent_entries_data = recent_entries.data if recent_entries.data else []
        for entry in recent_entries_data:
            created_at_str = entry['created_at']
            if '.' in created_at_str:
                created_at_str = created_at_str.split('.')[0] + '+00:00'
            else:
                created_at_str = created_at_str.replace('Z', '+00:00')
            entry_date = datetime.fromisoformat(created_at_str).replace(tzinfo=ZoneInfo("UTC"))
            entry_date_ist = entry_date.astimezone(ZoneInfo("Asia/Kolkata"))
            entry['created_at'] = entry_date_ist.strftime('%B %d, %Y')
            entry['content_snippet'] = (entry['content'][:50] + '…') if len(entry['content']) > 50 else entry['content']

    except Exception as e:
        logger.error(f"Error fetching data for index: {str(e)}")
        suggestions = ["Unable to load suggestions. Try writing!"]
        recent_entries_data = []

    # Fetch dropdown data
    dropdown_data = get_user_dropdown_data(supabase, user_id)

    return render_template('index.html', 
                          suggestions=suggestions, 
                          recent_entries=recent_entries_data, 
                          theme=session.get('theme', 'light'),
                          **dropdown_data)

@app.route('/journal', methods=['GET', 'POST'])
def journal():
    if 'user' not in session:
        logger.info("User not logged in, redirecting to login.")
        return redirect(url_for('login'))

    if session.get('two_factor_enabled') and not session.get('2fa_verified'):
        return redirect(url_for('verify_2fa'))

    supabase = get_supabase()
    user_id = session['user']
    current_date = datetime.now(ZoneInfo("UTC")).astimezone(ZoneInfo("Asia/Kolkata")).strftime('%B %d, %Y')

    if request.method == 'POST':
        content = request.form.get('content')
        if content:
            try:
                analysis = analyze_journal_entry(content, supabase, user_id)
                journal_data = {
                    'user_id': user_id,
                    'content': content,
                    'created_at': datetime.now(ZoneInfo("UTC")).isoformat(),
                    'analysis': analysis
                }
                supabase.table('journal_entries').insert(journal_data).execute()
                logger.info(f"Journal entry saved for user_id: {user_id}")
                return redirect(url_for('journal'))
            except Exception as e:
                logger.error(f"Journal save error: {str(e)}")
                return render_template('Journal.html', 
                                      error="Failed to save entry.", 
                                      current_date=current_date, 
                                      theme=session.get('theme', 'light'),
                                      **get_user_dropdown_data(supabase, user_id))

    try:
        entries = supabase.table('journal_entries')\
            .select('id, content, created_at')\
            .eq('user_id', user_id)\
            .order('created_at', desc=True)\
            .execute()

        for entry in entries.data:
            created_at_str = entry['created_at']
            if '.' in created_at_str:
                created_at_str = created_at_str.split('.')[0] + '+00:00'
            else:
                created_at_str = created_at_str.replace('Z', '+00:00')
            entry_date = datetime.fromisoformat(created_at_str).replace(tzinfo=ZoneInfo("UTC"))
            entry_date_ist = entry_date.astimezone(ZoneInfo("Asia/Kolkata"))
            entry['created_at'] = entry_date_ist.strftime('%Y-%m-%d %H:%M:%S')

        return render_template('Journal.html', 
                              entries=entries.data if entries.data else [], 
                              current_date=current_date, 
                              theme=session.get('theme', 'light'),
                              **get_user_dropdown_data(supabase, user_id))
    except Exception as e:
        logger.error(f"Journal fetch error: {str(e)}")
        return render_template('Journal.html', 
                              error="Failed to load entries.", 
                              current_date=current_date, 
                              theme=session.get('theme', 'light'),
                              **get_user_dropdown_data(supabase, user_id))

@app.route('/delete_entry/<entry_id>', methods=['DELETE'])
def delete_entry(entry_id):
    if 'user' not in session:
        logger.info("User not logged in, redirecting to login.")
        return "Unauthorized", 401
    
    supabase = get_supabase()
    user_id = session['user']

    try:
        response = supabase.table('journal_entries').select('*').eq('id', entry_id).execute()
        if not response.data or response.data[0]['user_id'] != user_id:
            return "Forbidden", 403
        
        supabase.table('journal_entries').delete().eq('id', entry_id).execute()
        logger.info(f"Entry {entry_id} deleted by user {user_id}.")
        return "Deleted", 200
    except Exception as e:
        logger.error(f"Delete error: {str(e)}")
        return "Unable to delete entry.", 500
    
@app.route('/progress')
def progress():
    if 'user' not in session:
        logger.info("User not logged in, redirecting to login.")
        return redirect(url_for('login'))

    if session.get('two_factor_enabled') and not session.get('2fa_verified'):
        return redirect(url_for('verify_2fa'))

    supabase = get_supabase()
    user_id = session['user']
    dropdown_data = get_user_dropdown_data(supabase, user_id)

    return render_template('progress.html', 
                          theme=session.get('theme', 'light'),
                          **dropdown_data)

@app.route('/vibe')
def vibe():
    if 'user' not in session:
        logger.info("User not logged in, redirecting to login.")
        return redirect(url_for('login'))

    if session.get('two_factor_enabled') and not session.get('2fa_verified'):
        return redirect(url_for('verify_2fa'))

    supabase = get_supabase()
    user_id = session['user']
    dropdown_data = get_user_dropdown_data(supabase, user_id)

    return render_template('vibe.html', 
                          theme=session.get('theme', 'light'),
                          **dropdown_data)

@app.route('/gratitude')
def gratitude():
    if 'user' not in session:
        logger.info("User not logged in, redirecting to login.")
        return redirect(url_for('login'))

    if session.get('two_factor_enabled') and not session.get('2fa_verified'):
        return redirect(url_for('verify_2fa'))

    supabase = get_supabase(use_service_role=True)  # Use service role to bypass RLS
    user_id = session['user']
    theme = session.get('theme', 'light')
    profile_info = {'profile_pic_url': None}

    try:
        # Fetch theme from user_preferences for consistency
        preferences_data = supabase.table('user_preferences')\
            .select('theme')\
            .eq('user_id', user_id)\
            .limit(1)\
            .execute()
        if preferences_data.data:
            theme = preferences_data.data[0].get('theme', 'light')
            session['theme'] = theme  # Update session for consistency

        # Fetch profile data (for profile picture in dropdown)
        profile_data = supabase.table('profiles')\
            .select('profile_pic_url')\
            .eq('user_id', user_id)\
            .limit(1)\
            .execute()
        if profile_data.data:
            profile_info['profile_pic_url'] = profile_data.data[0].get('profile_pic_url')
        else:
            logger.info(f"No profile found for user_id: {user_id}, creating a new profile")
            default_name = (session.get('user_email', 'user') or 'user').split('@')[0]
            supabase.table('profiles').insert({
                'user_id': user_id,
                'name': default_name,
                'username': f"@{default_name}"
            }).execute()

    except Exception as e:
        logger.error(f"Error fetching data for gratitude route for user_id {user_id}: {str(e)}")
        # Continue rendering with default values

    # Fetch dropdown data (includes user_name, user_email, joined_date)
    dropdown_data = get_user_dropdown_data(supabase, user_id)

    return render_template('gratitude.html',
                          theme=theme,
                          profile_data=profile_info,
                          **dropdown_data)

@app.route('/profile')
def profile():
    if 'user' not in session:
        logger.info("User not logged in, redirecting to login.")
        return redirect(url_for('login'))

    if session.get('two_factor_enabled') and not session.get('2fa_verified'):
        return redirect(url_for('verify_2fa'))

    supabase = get_supabase()
    user_id = session['user']
    logger.info(f"Fetching profile for user_id: {user_id}")

    try:
        user_data = supabase.table('users')\
            .select('email')\
            .eq('id', user_id)\
            .limit(1)\
            .execute()

        if not user_data.data:
            logger.error(f"No user found for user_id: {user_id}")
            return render_template('profile.html', 
                                  theme=session.get('theme', 'light'), 
                                  name='Unknown', 
                                  email='Not found', 
                                  username='@unknown', 
                                  profile_data={}, 
                                  completion_percentage=0, 
                                  completion_dasharray=0,
                                  **get_user_dropdown_data(supabase, user_id))

        user = user_data.data[0]
        email = user['email'] or 'Not found'

        profile_data = supabase.table('profiles')\
            .select('name, username, age, gender, location, preferred_language, primary_goal, engagement_frequency, preferred_activities, profile_pic_url')\
            .eq('user_id', user_id)\
            .limit(1)\
            .execute()

        if profile_data.data:
            profile = profile_data.data[0]
            name = profile['name'] if profile['name'] else 'Unknown'
            username = profile['username'] if profile['username'] else '@unknown'
            profile_info = {
                'age': profile['age'],
                'gender': profile['gender'],
                'location': profile['location'],
                'preferred_language': profile['preferred_language'],
                'primary_goal': profile['primary_goal'],
                'engagement_frequency': profile['engagement_frequency'],
                'preferred_activities': profile['preferred_activities'] or [],
                'profile_pic_url': profile['profile_pic_url']
            }
        else:
            logger.info(f"No profile found for user_id: {user_id}, creating a new profile")
            default_name = email.split('@')[0]
            supabase.table('profiles').insert({'user_id': user_id, 'name': default_name, 'username': f"@{default_name}"}).execute()
            profile_data = supabase.table('profiles')\
                .select('name, username, age, gender, location, preferred_language, primary_goal, engagement_frequency, preferred_activities, profile_pic_url')\
                .eq('user_id', user_id)\
                .limit(1)\
                .execute()
            profile = profile_data.data[0]
            name = profile['name']
            username = profile['username']
            profile_info = {
                'age': None,
                'gender': None,
                'location': None,
                'preferred_language': None,
                'primary_goal': None,
                'engagement_frequency': None,
                'preferred_activities': [],
                'profile_pic_url': None
            }

        required_fields = ['name', 'username', 'email']
        optional_fields = ['age', 'gender', 'location', 'preferred_language', 'primary_goal', 'engagement_frequency']
        activity_fields = ['preferred_activities']

        filled_required = 0
        for field in required_fields:
            value = locals().get(field)
            if field == 'email':
                if value and value != 'Not found':
                    filled_required += 1
            else:
                if value and value not in ['Unknown', '@unknown']:
                    filled_required += 1

        filled_optional = sum(1 for field in optional_fields if profile_info[field])
        filled_activities = 1 if profile_info['preferred_activities'] else 0
        total_fields = len(required_fields) + len(optional_fields) + len(activity_fields)
        filled_fields = filled_required + filled_optional + filled_activities
        completion_percentage = int((filled_fields / total_fields) * 100)
        completion_dasharray = round(276.46 * (completion_percentage / 100), 2)

        return render_template('profile.html', 
                              theme=session.get('theme', 'light'),
                              name=name,
                              email=email,
                              username=username,
                              profile_data=profile_info,
                              completion_percentage=completion_percentage,
                              completion_dasharray=completion_dasharray,
                              **get_user_dropdown_data(supabase, user_id))

    except Exception as e:
        logger.error(f"Error fetching profile data: {str(e)}")
        return render_template('profile.html', 
                              theme=session.get('theme', 'light'),
                              name='Unknown',
                              email='Not found',
                              username='@unknown',
                              profile_data={},
                              completion_percentage=0,
                              completion_dasharray=0,
                              **get_user_dropdown_data(supabase, user_id))


@app.route('/update_profile_field', methods=['POST'])
def update_profile_field():
    if 'user' not in session:
        return jsonify({'success': False, 'error': 'User not logged in'}), 401

    data = request.get_json()
    field = data.get('field')
    value = data.get('value')
    user_id = session['user']
    supabase = get_supabase()

    try:
        if field == 'email':
            # Update email in the users table
            response = supabase.table('users')\
                .update({'email': value})\
                .eq('id', user_id)\
                .execute()
            if response.data:
                return jsonify({'success': True}), 200
            else:
                return jsonify({'success': False, 'error': 'Failed to update email'}), 500
        elif field in ['name', 'username']:
            # Update name or username in the profiles table
            response = supabase.table('profiles')\
                .update({field: value})\
                .eq('user_id', user_id)\
                .execute()
            if response.data:
                return jsonify({'success': True}), 200
            else:
                return jsonify({'success': False, 'error': f'Failed to update {field}'}), 500
        else:
            return jsonify({'success': False, 'error': 'Invalid field'}), 400
    except Exception as e:
        logger.error(f"Error updating profile field {field}: {str(e)}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/upload_profile_pic', methods=['POST'])
def upload_profile_pic():
    if 'user' not in session:
        return jsonify({'error': 'Unauthorized'}), 401
    supabase = get_supabase()
    user_id = session['user']
    file = request.files.get('profile-pic')
    if not file:
        return jsonify({'error': 'No file uploaded'}), 400
    try:
        file_path = f"profiles/{user_id}/{uuid.uuid4()}.jpg"
        supabase.storage.from_('profile-pics').upload(file_path, file.read())
        url = supabase.storage.from_('profile-pics').get_public_url(file_path)
        supabase.table('profiles').update({'profile_pic_url': url}).eq('user_id', user_id).execute()
        return jsonify({'success': True, 'url': url}), 200
    except Exception as e:
        logger.error(f"Error uploading profile picture: {str(e)}")
        return jsonify({'error': 'Upload failed'}), 500

@app.route('/update_personal_details', methods=['POST'])
def update_personal_details():
    if 'user' not in session:
        return jsonify({'error': 'Unauthorized'}), 401
    supabase = get_supabase()
    user_id = session['user']
    data = request.get_json()

    try:
        supabase.table('profiles').update({
            'age': data.get('age'),
            'gender': data.get('gender'),
            'location': data.get('location'),
            'preferred_language': data.get('preferred_language')
        }).eq('user_id', user_id).execute()
        return jsonify({'success': True}), 200
    except Exception as e:
        logger.error(f"Error updating personal details: {str(e)}")
        return jsonify({'error': 'Failed to update personal details'}), 500

@app.route('/update_mental_health_goals', methods=['POST'])
def update_mental_health_goals():
    if 'user' not in session:
        return jsonify({'error': 'Unauthorized'}), 401
    supabase = get_supabase()
    user_id = session['user']
    data = request.get_json()

    try:
        supabase.table('profiles').update({
            'primary_goal': data.get('primary_goal'),
            'engagement_frequency': data.get('engagement_frequency'),
            'preferred_activities': data.get('preferred_activities')
        }).eq('user_id', user_id).execute()
        return jsonify({'success': True}), 200
    except Exception as e:
        logger.error(f"Error updating mental health goals: {str(e)}")
        return jsonify({'error': 'Failed to update mental health goals'}), 500


# Updated /settings route to use user_preferences table
@app.route('/settings', methods=['GET', 'POST'])
def settings():
    if 'user' not in session:
        logger.info("User not logged in, redirecting to login.")
        return redirect(url_for('login'))

    if session.get('two_factor_enabled') and not session.get('2fa_verified'):
        return redirect(url_for('verify_2fa'))

    supabase = get_supabase(use_service_role=True)  # Use service role to bypass RLS
    user_id = session['user']
    error = None
    success = None

    # Initialize profile_info with defaults
        return jsonify({'success': False, 'error': 'User not logged in'}), 401

    if session.get('two_factor_enabled') and not session.get('2fa_verified'):
        return jsonify({'success': False, 'error': '2FA verification required'}), 401

    supabase = get_supabase(use_service_role=True)
    user_id = session['user']
    profile_info = {
        'profile_pic_url': None,
        'two_factor_enabled': False,
        'theme': 'light',
        'reminder_time': '09:00',
        'notification_preference': 'email'
    }

    try:
        # Fetch user data (email) from the users table
        user_data = supabase.table('users')\
            .select('email')\
            .eq('id', user_id)\
            .limit(1)\
            .execute()

        if not user_data.data:
            logger.error(f"No user found for user_id: {user_id}")
            return redirect(url_for('logout'))

        email = user_data.data[0]['email']
        logger.info(f"User email fetched: {email}")

        # Fetch profile_pic_url and name from the profiles table
        profile_data = supabase.table('profiles')\
            .select('name, profile_pic_url')\
            .eq('user_id', user_id)\
            .limit(1)\
            .execute()

        if profile_data.data:
            profile = profile_data.data[0]
            profile_info['profile_pic_url'] = profile.get('profile_pic_url')
            logger.info(f"Profile data fetched: {profile_info}")
        else:
            logger.info(f"No profile found for user_id: {user_id}, creating a new profile")
        # Fetch user data
        user_data = supabase.table('users').select('email').eq('id', user_id).limit(1).execute()
        if not user_data.data:
            logger.error(f"No user found for user_id: {user_id}")
            return jsonify({'success': False, 'error': 'User not found'}), 404
        email = user_data.data[0]['email']

        # Fetch profile data
        profile_data = supabase.table('profiles').select('name, profile_pic_url').eq('user_id', user_id).limit(1).execute()
        if profile_data.data:
            profile_info['profile_pic_url'] = profile_data.data[0].get('profile_pic_url')
        else:
            default_name = email.split('@')[0]
            supabase.table('profiles').insert({
                'user_id': user_id,
                'name': default_name,
                'username': f"@{default_name}"
            }).execute()
            logger.info(f"New profile created for user_id: {user_id}")

        # Fetch user preferences from the user_preferences table
        preferences_data = supabase.table('user_preferences')\
            .select('two_factor_enabled, theme, reminder_time, notification_preference')\
            .eq('user_id', user_id)\
            .limit(1)\
            .execute()

        if preferences_data.data:
            preferences = preferences_data.data[0]
            profile_info.update({
                'two_factor_enabled': preferences.get('two_factor_enabled', False),
                'theme': preferences.get('theme', 'light'),
                'reminder_time': preferences.get('reminder_time', '09:00'),
                'notification_preference': preferences.get('notification_preference', 'email')
            })
            logger.info(f"User preferences fetched: {preferences}")
        else:
            logger.info(f"No user preferences found for user_id: {user_id}, creating a new entry")

        # Fetch preferences
        preferences_data = supabase.table('user_preferences').select('two_factor_enabled, theme, reminder_time, notification_preference').eq('user_id', user_id).limit(1).execute()
        if preferences_data.data:
            profile_info.update(preferences_data.data[0])
        else:
            supabase.table('user_preferences').insert({
                'user_id': user_id,
                'language': 'tamil',
                'theme': 'light',
                'two_factor_enabled': False,
                'reminder_time': '09:00',
                'notification_preference': 'email'
            }).execute()
            logger.info(f"New user preferences created for user_id: {user_id}")

        if request.method == 'POST':
            try:
                # Handle form submission

        if request.method == 'POST':
            try:
                new_email = request.form.get('email', email).strip().lower()
                password = request.form.get('password')
                confirm_password = request.form.get('confirm_password')
                two_factor_enabled = request.form.get('two_factor_enabled') == 'on'
                theme = request.form.get('theme', profile_info['theme'])
                reminder_time = request.form.get('reminder_time', profile_info['reminder_time'])
                notification_preference = request.form.get('notification_preference', profile_info['notification_preference'])

                # Validate inputs
                if not new_email:
                    error = 'Email is required'
                    return render_template('settings.html',
                                          email=email,
                                          profile_data=profile_info,
                                          two_factor_enabled=profile_info['two_factor_enabled'],
                                          theme=profile_info['theme'],
                                          reminder_time=profile_info['reminder_time'],
                                          notification_preference=profile_info['notification_preference'],
                                          error=error,
                                          success=success,
                                          **get_user_dropdown_data(supabase, user_id))

                # Check if email already exists (excluding current user)
                existing_user = supabase.table('users')\
                    .select('id')\
                    .eq('email', new_email)\
                    .neq('id', user_id)\
                    .execute()
                if existing_user.data:
                    error = 'Email already exists'
                    return render_template('settings.html',
                                          email=email,
                                          profile_data=profile_info,
                                          two_factor_enabled=profile_info['two_factor_enabled'],
                                          theme=profile_info['theme'],
                                          reminder_time=profile_info['reminder_time'],
                                          notification_preference=profile_info['notification_preference'],
                                          error=error,
                                          success=success,
                                          **get_user_dropdown_data(supabase, user_id))

                # Validate password if provided
                if password or confirm_password:
                    if password != confirm_password:
                        error = 'Passwords do not match'
                        return render_template('settings.html',
                                              email=email,
                                              profile_data=profile_info,
                                              two_factor_enabled=profile_info['two_factor_enabled'],
                                              theme=profile_info['theme'],
                                              reminder_time=profile_info['reminder_time'],
                                              notification_preference=profile_info['notification_preference'],
                                              error=error,
                                              success=success,
                                              **get_user_dropdown_data(supabase, user_id))

                # Update users table (email and password)
                update_user_data = {'email': new_email}
                if password:
                    update_user_data['password'] = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')
                supabase.table('users')\
                    .update(update_user_data)\
                    .eq('id', user_id)\
                    .execute()

                # Update user_preferences table
                    return jsonify({'success': False, 'error': 'Email is required'}), 400

                # Check if email already exists
                existing_user = supabase.table('users').select('id').eq('email', new_email).neq('id', user_id).execute()
                if existing_user.data:
                    return jsonify({'success': False, 'error': 'Email already exists'}), 400

                # Validate password
                if password and password != confirm_password:
                    return jsonify({'success': False, 'error': 'Passwords do not match'}), 400

                # Update users table
                update_user_data = {'email': new_email}
                if password:
                    update_user_data['password'] = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')
                supabase.table('users').update(update_user_data).eq('id', user_id).execute()

                # Update preferences
                update_preferences_data = {
                    'two_factor_enabled': two_factor_enabled,
                    'theme': theme,
                    'reminder_time': reminder_time,
                    'notification_preference': notification_preference
                }
<<<<<<< HEAD
                supabase.table('user_preferences')\
                    .update(update_preferences_data)\
                    .eq('user_id', user_id)\
                    .execute()
=======
                supabase.table('user_preferences').update(update_preferences_data).eq('user_id', user_id).execute()
>>>>>>> 47dab7869e18a249a402adc883d747a3309ddb81

                # Update session
                session['user_email'] = new_email
                session['theme'] = theme
                session['two_factor_enabled'] = two_factor_enabled

                logger.info(f"Settings updated for user_id: {user_id}")
                success = 'Settings updated successfully!'

            except Exception as e:
                logger.error(f"Error updating settings for user_id: {user_id}: {str(e)}")
                error = str(e)

                return jsonify({'success': True, 'message': 'Settings updated successfully'})

            except Exception as e:
                logger.error(f"Error updating settings for user_id: {user_id}: {str(e)}")
                return jsonify({'success': False, 'error': str(e)}), 500

        # GET request: Render template
        dropdown_data = get_user_dropdown_data(supabase, user_id)
        return render_template('settings.html',
                              email=email,
                              profile_data=profile_info,
                              two_factor_enabled=profile_info['two_factor_enabled'],
                              theme=profile_info['theme'],
                              reminder_time=profile_info['reminder_time'],
                              notification_preference=profile_info['notification_preference'],
                              error=None,
                              success=None,
                              **dropdown_data)

    except Exception as e:
        logger.error(f"Error in settings: {str(e)}")
        return jsonify({'success': False, 'error': str(e)}), 500
        # Fetch dropdown data
        dropdown_data = get_user_dropdown_data(supabase, user_id)

        # GET request or POST with error/success: Render the settings page
        return render_template('settings.html',
                              email=email,
                              profile_data=profile_info,
                              two_factor_enabled=profile_info['two_factor_enabled'],
                              theme=profile_info['theme'],
                              reminder_time=profile_info['reminder_time'],
                              notification_preference=profile_info['notification_preference'],
                              error=error,
                              success=success,
                              **dropdown_data)

    except Exception as e:
        logger.error(f"Error in settings: {str(e)}")
        return render_template('settings.html',
                              email='Not found',
                              profile_data=profile_info,
                              two_factor_enabled=False,
                              theme='light',
                              reminder_time='09:00',
                              notification_preference='email',
                              error='An error occurred while fetching settings',
                              success=None,
                              **get_user_dropdown_data(supabase, user_id))

# Updated /export_data route to include user_preferences
@app.route('/export_data', methods=['GET'])
def export_data():
    if 'user' not in session:
        logger.info("User not logged in, redirecting to login.")
        return jsonify({'success': False, 'error': 'User not logged in'}), 401

    supabase = get_supabase(use_service_role=True)
    user_id = session['user']

    try:
        user_data = supabase.table('users')\
            .select('email')\
            .eq('id', user_id)\
            .limit(1)\
            .execute()

        if not user_data.data:
            logger.error(f"No user found for user_id: {user_id}")
            return jsonify({'success': False, 'error': 'User not found'}), 404

        profile_data = supabase.table('profiles')\
            .select('name, username, profile_pic_url, age, gender, location, preferred_language, primary_goal, engagement_frequency, preferred_activities, created_at, updated_at')\
            .eq('user_id', user_id)\
            .limit(1)\
            .execute()

        preferences_data = supabase.table('user_preferences')\
            .select('language, theme, two_factor_enabled, reminder_time, notification_preference')\
            .eq('user_id', user_id)\
            .limit(1)\
            .execute()

        export_data = {
            'user': {
                'email': user_data.data[0]['email'],
                'id': user_id
            },
            'profile': profile_data.data[0] if profile_data.data else {},
            'preferences': preferences_data.data[0] if preferences_data.data else {}
        }

        logger.info(f"Data exported for user_id: {user_id}")
        return jsonify({'success': True, 'data': export_data})

    except Exception as e:
        logger.error(f"Error exporting data for user_id: {user_id}: {str(e)}")
        return jsonify({'success': False, 'error': 'Failed to export data'}), 500

# Updated /delete_account route to also delete user_preferences
@app.route('/delete_account', methods=['POST'])
def delete_account():
    if 'user' not in session:
        logger.info("User not logged in, redirecting to login.")
        return jsonify({'success': False, 'error': 'User not logged in'}), 401

    supabase = get_supabase(use_service_role=True)
    user_id = session['user']

    try:
        supabase.table('journal_entries').delete().eq('user_id', user_id).execute()
        supabase.table('gratitude_entries').delete().eq('user_id', user_id).execute()
        supabase.table('user_preferences').delete().eq('user_id', user_id).execute()
        supabase.table('profiles').delete().eq('user_id', user_id).execute()
        supabase.table('users').delete().eq('id', user_id).execute()

        session.clear()
        logger.info(f"Account deleted for user_id: {user_id}")
        return jsonify({'success': True, 'message': 'Account deleted successfully'})

    except Exception as e:
        logger.error(f"Error deleting account for user_id: {user_id}: {str(e)}")
        return jsonify({'success': False, 'error': 'Failed to delete account'}), 500

@app.route('/logout')
def logout():
    if 'user' in session:
        user_email = session.get('user_email', 'Unknown')
        session.pop('user', None)
        session.pop('user_email', None)
        session.pop('last_activity', None)
        session.pop('theme', None)
        session.pop('2fa_verified', None)
        session.pop('two_factor_enabled', None)
        logger.info(f"User {user_email} logged out.")
    return redirect(url_for('login'))

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)
```

# File: dump all files.py
```py


import os

# Extensions to include
extensions = [".html", ".js", ".css", ".py", ".md"]
output_file = "NEUROAID_dump.txt"

with open(output_file, "w", encoding="utf-8") as out:
    for root, _, files in os.walk("."):
        for file in files:
            if any(file.endswith(ext) for ext in extensions):
                filepath = os.path.join(root, file)
                rel_path = os.path.relpath(filepath, ".").replace("\\", "/")
                ext = os.path.splitext(file)[1].lstrip(".")
                try:
                    with open(filepath, "r", encoding="utf-8") as f:
                        content = f.read()
                except Exception as e:
                    content = f"[Error reading file: {e}]"

                out.write(f"# File: {rel_path}\n")
                out.write(f"```{ext}\n{content}\n```\n\n")

print(f"✅ Combined content saved to: {output_file}")

```

# File: flask_storage.py
```py
from gotrue import SyncSupportedStorage
from flask import session

class FlaskSessionStorage(SyncSupportedStorage):
    def __init__(self):
        pass

    def get_item(self, key: str) -> str | None:
        return session.get(key)

    def set_item(self, key: str, value: str) -> None:
        session[key] = value

    def remove_item(self, key: str) -> None:
        session.pop(key, None)
```

# File: README.md
```md
Your mental health matters!

```

# File: example quill/journal.html
```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>NeuroAid Journal</title>

  <!-- Quill CSS -->
  <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet" />
<style>
  body {
  font-family: 'Poppins', sans-serif;
  padding: 2rem;
  background-color: #f3f4f6;
}

h1, p {
  color: #2D2D2D;
}

#editor {
  height: 300px;
  background-color: #F4F0FA;
  border: 1px solid #7A7A8C;
  padding: 1rem;
  border-radius: 8px;
}

.save-btn {
  margin-top: 1rem;
  padding: 10px 20px;
  background-color: #7c3aed;
  color: #ffffff;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  font-weight: 500;
  transition: background-color 0.3s ease;
}

.save-btn:hover {
  background-color: #D8C4E6;
}
</style>
</head>
<body>

  <h1>📝 Your Daily Journal</h1>
  <p>Write freely and reflect on your day.</p>

  <!-- Editor Container -->
  <div id="editor"></div>

  <!-- Save Button -->
  <button class="save-btn" onclick="saveJournal()">Save Entry</button>

  <!-- Quill JS -->
  <script src="https://cdn.quilljs.com/1.3.6/quill.min.js"></script>

  <!-- Quill Init -->
  <script>
    const quill = new Quill('#editor', {
      theme: 'snow'
    });

    function saveJournal() {
      const content = quill.root.innerHTML;
      console.log("Journal Content:", content);
      alert("Journal saved (check console)");
      // Later: send `content` to Supabase or your backend here
    }
  </script>

</body>
</html>


```

# File: static/css/dashboard.css
```css
/* Remove hardcoded :root variables to rely on themes/dark.css */
/* Variables like --card-bg, --text-primary, etc., are sourced from themes/dark.css */

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: 'Inter', sans-serif;
}

body {
  min-height: 100vh;
  background: var(--background);
  display: flex;
  flex-direction: column;
}

.wrapper {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
}

.container {
  display: flex;
}

.sidebar {
  width: 260px;
  background: var(--glass-bg);
  backdrop-filter: blur(10px);
  border-right: 1px solid var(--glass-border);
  padding: 24px;
  display: flex;
  flex-direction: column;
  gap: 32px;
  position: fixed;
  top: 0;
  left: 0;
  height: 100vh;
  box-shadow: 2px 0 10px rgba(0, 0, 0, 0.05);
  z-index: 1000;
  transition: all 0.3s ease;
}

.logo {
  display: flex;
  align-items: center;
  gap: 12px;
}

.logo i {
  font-size: 2rem;
  color: var(--primary);
}

.dropdown-content .user-info {
  padding: 10px;
  border-bottom: 1px solid #eee;
  font-size: 14px;
  color: var(--text-primary);
  z-index: 1;
}

.dropdown-content .user-info p {
  margin: 5px 0;
  display: flex;
  align-items: center;
  gap: 8px;
}

.dropdown-content .user-info i {
  font-size: 16px;
  color: var(--primary);
}

.logo h1 {
  font-size: 2.3rem;
  font-weight: 700;
  color: var(--text-primary);
}

.logo h1 span {
  color: var(--primary);
}

.sidebar nav {
  display: flex;
  flex-direction: column;
  gap: 12px;
}

.sidebar nav a {
  color: var(--text-primary);
  text-decoration: none;
  font-size: 1.3rem;
  font-weight: 500;
  padding: 12px 16px;
  border-radius: 8px;
  display: flex;
  align-items: center;
  gap: 18px;
  transition: all 0.3s ease;
}

.sidebar nav a:hover,
.sidebar nav a.active {
  background: var(--primary);
  color: #fff;
}

.main-content {
  margin-left: 260px;
  flex: 1;
  padding: 24px;
  display: flex;
  flex-direction: column;
}

header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 16px 24px;
  background: var(--header-bg);
  border-radius: 12px;
  backdrop-filter: blur(10px);
  border: 1px solid var(--glass-border);
  margin-bottom: 24px;
}

.search-bar {
  display: flex;
  align-items: center;
  gap: 16px;
  background: rgba(255, 255, 255, 0.3);
  padding: 14px 20px;
  border-radius: 10px;
  width: 450px;
}

.search-bar i {
  color: #fff;
  font-size: 1.5rem;
}

.search-bar input {
  background: transparent;
  border: none;
  color: #fff;
  font-size: 1.2rem;
  outline: none;
  width: 100%;
}

.search-bar input::placeholder {
  color: rgba(255, 255, 255, 0.7);
  font-size: 1.2rem;
}

.profile {
  display: flex;
  align-items: center;
  gap: 12px;
  cursor: pointer;
}

.profile img {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  border: 2px solid #fff;
  object-fit: cover;
}

.profile span {
  color: #fff;
  font-size: 1rem;
  font-weight: 500;
}

.profile i {
  color: #fff;
  font-size: 1.2rem;
}

.dashboard {
  flex: 1;
}

.dashboard h2 {
  font-size: 1.8rem;
  font-weight: 600;
  color: var(--text-primary);
  margin-bottom: 24px;
  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
}

.card-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
  gap: 24px;
}

.card {
  background: var(--card-bg, #2a3646);
  border-radius: 16px;
  padding: 24px;
  border: 1px solid var(--glass-border);
  backdrop-filter: blur(12px);
  box-shadow: var(--shadow);
  display: flex;
  align-items: center;
  gap: 16px;
  transition: transform 0.3s ease, box-shadow 0.3s ease;
  color: var(--text-primary);
}

.card:hover {
  transform: translateY(-8px);
  box-shadow: 0 12px 40px rgba(0, 0, 0, 0.1);
}

.card-icon {
  font-size: 2.2rem;
  color: var(--primary);
  background: var(--secondary);
  border-radius: 12px;
  padding: 12px;
  min-width: 48px;
  min-height: 48px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.card-content h3 {
  font-size: 1.2rem;
  font-weight: 600;
  color: var(--text-primary);
  margin-bottom: 8px;
}

.card-content p {
  font-size: 0.95rem;
  color: var(--text-primary);
  line-height: 1.5;
  margin-bottom: 16px;
}

.card-button {
  background: var(--accent);
  color: #fff;
  border: none;
  padding: 8px 16px;
  border-radius: 8px;
  font-size: 0.9rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.3s ease;
}

.card-button a {
  color: #fff;
  text-decoration: none;
}

.card-button:hover {
  background: #6d28d9;
}

.card.welcome .card-icon { background: #f5f3ff; color: #7c3aed; }
.card.journal .card-icon { background: #f5f3ff; color: #8b5cf6; }
.card.mood .card-icon { background: #f5f3ff; color: #a78bfa; }
.card.tips .card-icon { background: #f5f3ff; color: #c084fc; }

footer {
  text-align: center;
  padding: 20px;
  background: var(--card-bg, #2a3646);
  color: var(--text-primary);
  font-size: 1.2rem;
  backdrop-filter: blur(4px);
  border-top: 1px solid var(--glass-border);
  margin-top: auto;
  width: 100%;
}

.quick-actions {
  display: flex;
  gap: 35px;
}

.action-button {
  background: none;
}

.action-button:hover {
  background: none;
}

/* Stats section */
.stats-section {
  margin-bottom: 32px;
}

.stats-section h2 {
  font-size: 1.8rem;
  font-weight: 600;
  color: var(--text-primary);
  margin-bottom: 24px;
  display: flex;
  align-items: center;
  gap: 12px;
}

.stats-section h2 i {
  color: var(--primary);
  font-size: 2rem;
}

.stats-boxes {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
  gap: 24px;
  width: 100%;
}

.stat-box {
  background: var(--card-bg, #2a3646);
  border-radius: 16px;
  padding: 24px;
  border: 1px solid var(--glass-border);
  backdrop-filter: blur(12px);
  box-shadow: var(--shadow);
  display: flex;
  align-items: center;
  gap: 16px;
  transition: transform 0.3s ease, box-shadow 0.3s ease;
  color: var(--text-primary);
}

.stat-box:hover {
  transform: translateY(-8px);
  box-shadow: 0 12px 40px rgba(0, 0, 0, 0.1);
}

.stat-box i {
  font-size: 2.2rem;
  color: var(--primary);
  background: var(--secondary);
  border-radius: 12px;
  padding: 12px;
  min-width: 48px;
  min-height: 48px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.stat-box h3 {
  font-size: 1.2rem;
  font-weight: 600;
  color: var(--text-primary);
  margin-bottom: 8px;
}

.stat-box p {
  font-size: 0.95rem;
  color: var(--text-primary);
  line-height: 1.5;
}

/* Chart section */
.chart-section {
  margin-bottom: 32px;
}

.chart-section h2 {
  font-size: 1.8rem;
  font-weight: 600;
  color: var(--text-primary);
  margin-bottom: 24px;
  display: flex;
  align-items: center;
  gap: 12px;
}

.chart-section h2 i {
  color: var(--primary);
  font-size: 2rem;
}

.chart-card {
  background: var(--card-bg, #2a3646);
  border-radius: 16px;
  padding: 10px;
  border: 1px solid var(--glass-border);
  backdrop-filter: blur(12px);
  box-shadow: var(--shadow);
  width: 100%;
  min-height: 670px;
  overflow: visible;
  color: var(--text-primary);
}

.chart-card canvas {
  width: 100% !important;
  max-width: 900px;
  height: 650px !important;
  margin: 0 auto;
}

/* Insights section */
.insights-section {
  margin-bottom: 32px;
}

.insights-section h2 {
  font-size: 1.8rem;
  font-weight: 600;
  color: var(--text-primary);
  margin-bottom: 24px;
  display: flex;
  align-items: center;
  gap: 12px;
}

.insights-section h2 i {
  color: var(--primary);
  font-size: 2rem;
}

.insights-content {
  background: var(--card-bg, #2a3646);
  border-radius: 16px;
  padding: 24px;
  border: 1px solid var(--glass-border);
  backdrop-filter: blur(12px);
  box-shadow: var(--shadow);
  font-size: 1rem;
  color: var(--text-primary);
  line-height: 1.5;
  width: 100%;
}

/* Responsive Styles */
@media (max-width: 900px) {
  .sidebar {
    width: 80px;
    align-items: center;
  }

  .sidebar .logo h1 {
    display: none;
  }

  .sidebar nav a {
    justify-content: center;
    padding: 12px;
  }

  .sidebar nav a span {
    display: none;
  }

  .main-content {
    margin-left: 80px;
  }

  .search-bar {
    width: 300px;
  }

  .stats-boxes {
    grid-template-columns: 1fr;
  }

  .chart-card {
    min-height: 670px;
  }

  .chart-card canvas {
    max-width: 100%;
    height: 400px !important;
  }
}

@media (max-width: 600px) {
  .sidebar {
    width: 100%;
    height: auto;
    position: static;
    flex-direction: row;
    justify-content: space-between;
    padding: 16px;
  }

  .sidebar nav {
    flex-direction: row;
    gap: 8px;
  }

  .main-content {
    margin-left: 0;
    padding: 16px;
  }

  .card-grid {
    grid-template-columns: 1fr;
  }

  .stats-section h2,
  .chart-section h2,
  .insights-section h2 {
    font-size: 1.6rem;
  }

  .stat-box,
  .chart-card,
  .insights-content {
    padding: 16px;
  }

  .search-bar {
    width: 100%;
    padding: 10px 16px;
  }

  .search-bar i {
    font-size: 1.2rem;
  }

  .search-bar input,
  .search-bar input::placeholder {
    font-size: 1rem;
  }

  .chart-card {
    min-height: 450px;
  }

  .chart-card canvas {
    height: 300px !important;
  }
}

/* Reusable button styles */
.neuroaid-btn {
  background-color: var(--primary);
  color: #fff;
  border: none;
  padding: 12px 24px;
  border-radius: 8px;
  font-size: 1rem;
  font-weight: 500;
  cursor: pointer;
  transition: transform 0.3s ease, box-shadow 0.3s ease, background-color 0.3s ease;
  display: inline-flex;
  align-items: center;
  gap: 8px;
}

.neuroaid-btn:hover {
  transform: scale(1.05);
  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
  background-color: #6d28d9;
}

.neuroaid-btn:active {
  transform: scale(0.95);
}

.neuroaid-btn.loading {
  position: relative;
  pointer-events: none;
  opacity: 0.7;
}

.neuroaid-btn.loading::after {
  content: '';
  position: absolute;
  width: 16px;
  height: 16px;
  border: 2px solid #fff;
  border-top: 2px solid transparent;
  border-radius: 50%;
  animation: spin 0.8s linear infinite;
  right: 10px;
  top: 50%;
  transform: translateY(-50%);
}

@keyframes spin {
  0% { transform: translateY(-50%) rotate(0deg); }
  100% { transform: translateY(-50%) rotate(360deg); }
}

/* Extracted inline styles from dashboard page */
.welcome-message {
  margin-bottom: 30px;
}

.welcome-message h2 {
  color: var(--text-primary);
  font-size: 42px;
  display: flex;
  align-items: center;
}

.welcome-message p {
  color: var(--text-primary);
  font-family: 'Inter', 'Arial', sans-serif;
  font-size: 26px;
  font-weight: 500;
  margin-top: 15px;
  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
}

.suggestions-card {
  background: var(--card-bg, #2a3646);
  padding: 20px;
  border-radius: 8px;
  box-shadow: var(--shadow);
  margin-bottom: 30px;
  color: var(--text-primary);
}

.suggestions-card h3 {
  color: var(--text-primary);
  font-size: 30px;
  margin-bottom: 15px;
  display: flex;
  align-items: center;
}

.suggestions-card ul {
  list-style-type: disc;
  padding-left: 20px;
  margin-top: 25px;
  color: var(--text-primary);
  font-size: 22px;
}

.suggestions-card ul li {
  margin-bottom: 10px;
  display: flex;
  gap: 15px;
  margin-top: 15px;
}

.suggestions-card p {
  color: var(--text-secondary);
  margin-bottom: 10px;
  display: flex;
  gap: 15px;
  margin-top: 15px;
}

.entry-preview {
  background: var(--card-bg, #2a3646);
  border: 1px solid var(--glass-border);
  border-radius: 10px;
  padding: 15px;
  margin-bottom: 10px;
  box-shadow: var(--shadow);
  color: var(--text-primary);
}

.entry-meta {
  font-size: 20px;
  color: #ffffff;
  margin-bottom: 5px;
}

.entry-snippet {
  color: #e5e7eb;
  font-size: 18px;
  margin: 15px 0;
}

.entry-preview a {
  color: var(--accent);
  font-size: 18px;
  font-weight: 500;
  text-decoration: none;
}

.entry-preview a:hover {
  color: #ffffff;
}
```

# File: static/css/dropdown.css
```css
.profile-dropdown {
    position: relative;
    display: inline-block;
}
.dropdown-content{
   display: none; /* Hidden by default */
  position: absolute;
  top: 100%; /* Position below the profile trigger */
  right: 0; /* Align to the right of the parent */
  background-color: #fff;
  min-width: 200px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  border-radius: 8px;
  z-index: 1000;
}
.dropdown-content .user-info {
  padding: 10px;
  border-bottom: 1px solid #eee;
  font-size: 14px;
  color: #333;
}

.dropdown-content .user-info p {
  margin: 5px 0;
  display: flex;
  align-items: center;
  gap: 8px;
}

.dropdown-content .user-info i {
  font-size: 16px;
  color: #7c3aed;
}
.profile {
    display: flex;
    align-items: center;
    gap: 8px;
    cursor: pointer;
    padding: 5px 10px;
    border-radius: 5px;
    transition: background-color 0.3s;
}

.profile:hover {
    background-color: #f0f0f0;
}

.profile img {
    width: 40px;
    height: 40px;
    border-radius: 50%;
}

.profile span {
    font-size: 16px;
    font-weight: 500;
    color: #2d2d2d;
}

.dropdown-content {
    display: none;
    position: absolute;
    top: 100%;
    right: 0;
    background-color: #ffffff;
    min-width: 200px;
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
    border-radius: 8px;
    z-index: 1;
    overflow: hidden;
}

.dropdown-content .user-info {
    padding: 12px 16px;
    border-bottom: 1px solid #eee;
}

.dropdown-content .user-info p {
    margin: 4px 0;
    font-size: 14px;
    color: #2d2d2d;
    display: flex;
    align-items: center;
    gap: 8px;
}

.dropdown-content .user-info p i {
    font-size: 16px;
    color: #7c3aed;
}

.dropdown-content a {
    display: flex;
    align-items: center;
    gap: 10px;
    padding: 12px 16px;
    color: #2d2d2d;
    text-decoration: none;
    font-size: 14px;
    transition: background-color 0.3s;
}

.dropdown-content a:hover {
    background-color: #f7f7f7;
}

.dropdown-content a i {
    font-size: 16px;
    color: #7c3aed;
}

/* Theme-specific styles */
.theme-dark .profile span {
    color: #ffffff;
}

.theme-dark .profile:hover {
    background-color: #444;
}

.theme-dark .dropdown-content {
    background-color: #333;
}

.theme-dark .dropdown-content .user-info {
    border-bottom: 1px solid #555;
}

.theme-dark .dropdown-content .user-info p {
    color: #ffffff;
}

.theme-dark .dropdown-content .user-info p i {
    color: #a78bfa;
}

.theme-dark .dropdown-content a {
    color: #ffffff;
}

.theme-dark .dropdown-content a:hover {
    background-color: #555;
}

.theme-dark .dropdown-content a i {
    color: #a78bfa;
}

.theme-calming .profile span {
    color: #7c3aed;
}

.theme-calming .profile:hover {
    background-color: #e8e1fa;
}

.theme-calming .dropdown-content {
    background-color: #f4f0fa;
}

.theme-calming .dropdown-content .user-info {
    border-bottom: 1px solid #d1c4e9;
}

.theme-calming .dropdown-content .user-info p {
    color: #5b2cb3;
}

.theme-calming .dropdown-content .user-info p i {
    color: #7c3aed;
}

.theme-calming .dropdown-content a {
    color: #5b2cb3;
}

.theme-calming .dropdown-content a:hover {
    background-color: #e8e1fa;
}

.theme-calming .dropdown-content a i {
    color: #7c3aed;
}
```

# File: static/css/gratitude.css
```css
.gratitude-section {
            margin-top: 20px;
        }
.gratitude-section h2{
    font-size: 32px;
    margin-bottom: 20px;
}
        .gratitude-form {
            background-color: #e8e1fa;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
            margin-bottom: 30px;
        }
        .gratitude-form h3 {
            color: #000000;
            margin-bottom: 15px;
            font-size: 25px;
        }
        .gratitude-form label {
            display: block;
            color: #363333;
            font-size: 20px;
            margin-bottom: 5px;
        }
        .gratitude-form textarea {
            width: 100%;
            padding: 10px;
            border: 1px solid #c7bbe4;
            border-radius: 15px;
            font-size: 16px;
            resize: vertical;
            margin-bottom: 15px;
        }

        .suggestions {
            margin-top: 10px;
            color: #3d3939;
            font-style: italic;
            font-size: 14px;
        }
        .streak-counter {
            background-color: #ffffff;
            border: 1px solid #c7bbe4;
            border-radius: 10px;
            padding: 15px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.07);
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        .streak-counter i {
            color: #7c3aed;
            font-size: 24px;
        }
        .streak-counter p {
            margin: 0;
            color: #202020;
            font-size: 18px;
        }
        .timeline {
            margin-top: 20px;
        }

        .timeline h3{
            font-size: 28px;
        }
        .timeline-entry {
            background-color: #ffffff;
            border: 1px solid #c7bbe4;
            border-radius: 10px;
            padding: 15px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.07);
            margin-bottom: 10px;
        }
        .timeline-entry .date {
            font-size: 16px;
            color: #7c3aed;
            margin-bottom: 5px;
        }
        .timeline-entry .entry-content p {
            margin: 5px 0;
            color: #202020;
            font-size: 16px;
        }
```

# File: static/css/journal.css
```css
body {
  margin: 0;
  font-family: 'Inter', sans-serif;
  display: flex;
  background-color: #f5f5f5;
}

.journal-section {
  width: 1400px;
  margin: 0 auto;
  background-color: #ffffff;
  padding: 20px;
  border-radius: 10px;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}

.journal-header {
  margin-bottom: 30px;
}

.journal-header h2 {
  color: #2d2d2d;
  margin-bottom: 10px;
  display: flex;
  align-items: center;
  gap: 10px;
  font-size: 32px;
}

.journal-header p {
  color: #666;
  margin-bottom: 15px;
  font-size: 25px;
}

.journal-meta {
   align-items: center;
  justify-content: space-between;
  color: #7c3aed;
  font-size: 20px;
  font-weight: 500;
  background-color: #f4f0fa;
  padding: 8px 12px;
  border-radius: 5px;
}

#editor {
  height: 600px;
  width:100%;
  font-size: 23px;
  background-color: #f4f0fa;
  border: 1px solid #7a7a8c;
  border-radius: 8px;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
}

.ql-toolbar.ql-snow {
  border-top-left-radius: 8px;
  border-top-right-radius: 8px;
  border-color: #7a7a8c;
  background-color: #fff;
  padding: 8px;
}

.ql-container.ql-snow {
  border-bottom-left-radius: 8px;
  border-bottom-right-radius: 8px;
  border-color: #7a7a8c;
  font-family: 'Inter', sans-serif;
  font-size: 16px;
}

.ql-editor {
  background-color: #f4f0fa;
  color: #2d2d2d;
}

.journal-actions {
  margin-top: 20px;
  text-align: right;

}

.save-btn:hover {
  background-color: #6b21a8;
}

.delete-entry-btn {
  position: absolute;
  top: 15px;
  right: 15px;
  background-color: #ef4444;
  color: white;
  padding: 5px 10px;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  z-index: 10;  
}

.entry-card {
  position: relative;
  background-color: #f4f0fa;
  padding: 15px;
  border-radius: 8px;
  margin-bottom: 15px;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
}

```

# File: static/css/profile.css
```css
.profile-section {
  display: flex;
  flex-direction: column;
  gap: 32px;
}

.input-container input.editable {
        border: 2px solid #7c3aed;
        background-color: #f9f9f9;
  }
.input-container input:disabled {
        background-color: #e9ecef;
  }
.profile-header {
  text-align: center;
  margin-bottom: 24px;
}

.profile-header h2 {
  font-size: 1.8rem;
  font-weight: 700;
  color: var(--text-primary);
  margin-bottom: 8px;
}

.profile-header p {
  font-size: 1rem;
  color: var(--text-secondary);
  margin-bottom: 16px;
}

.progress-container {
  display: flex;
  justify-content: center;
  align-items: center;
}

.progress-circle {
  position: relative;
  width: 100px;
  height: 100px;
}

.progress-ring__circle {
  transition: stroke-dashoffset 0.35s;
  transform: rotate(-90deg);
  transform-origin: 50% 50%;
}

.progress-text {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  font-size: 1rem;
  font-weight: 600;
  color: var(--primary);
}

.card {
  background: linear-gradient(145deg, rgba(255, 255, 255, 0.95), rgba(255, 255, 255, 0.85));
  border: 1px solid var(--glass-border);
  border-radius: 12px;
  backdrop-filter: blur(10px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.card-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
  padding: 20px 24px;
  border-bottom: 1px solid rgba(0, 0, 0, 0.05);
}

.card-header h3 {
  font-size: 1.4rem;
  font-weight: 600;
  color: var(--text-primary);
}

.status-indicator {
  font-size: 0.9rem;
  font-weight: 500;
  padding: 6px 12px;
  border-radius: 12px;
  min-width: 140px;
  text-align: center;
  background: rgba(255, 255, 255, 0.6);
  border: 1px solid var(--glass-border);
}

.status-indicator.complete {
  color: #10b981;
  background: rgba(16, 185, 129, 0.15);
  border-color: rgba(16, 185, 129, 0.3);
}

.status-indicator.incomplete {
  color: #ef4444;
  background: rgba(239, 68, 68, 0.15);
  border-color: rgba(239, 68, 68, 0.3);
}

.profile-overview {
  padding: 24px;
}

.profile-content {
  display: flex;
  align-items: flex-start;
  gap: 40px;
}

.profile-picture {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 16px;
}

.profile-picture img {
  width: 120px;
  height: 120px;
  border-radius: 50%;
  object-fit: cover;
  border: 2px solid var(--glass-border);
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
}

.edit-button {
  background: linear-gradient(145deg, #7c3aed, #6d28d9);
  color: #fff;
  border: none;
  padding: 8px 16px;
  border-radius: 8px;
  font-size: 0.95rem;
  font-weight: 500;
  cursor: pointer;
  transition: transform 0.1s, box-shadow 0.2s;
}

.edit-button:hover {
  transform: translateY(-1px);
  box-shadow: 0 2px 8px rgba(124, 58, 237, 0.3);
}

.form-container {
  flex: 1;
  display: flex;
  flex-direction: column;
  gap: 24px;
}

.form-field {
  display: flex;
  align-items: center;
  gap: 20px;
  width: 100%;
}

.form-field label {
  width: 160px;
  font-size: 1rem;
  font-weight: 600;
  color: #374151;
  line-height: 1.5;
}

.input-container {
  flex: 1;
  display: flex;
  align-items: center;
  gap: 16px;
  min-height: 48px; /* Ensures consistent height for alignment */
}

.form-field input,
.form-field select {
  flex: 1;
  padding: 12px 16px;
  border: none;
  border-radius: 8px;
  font-size: 1rem;
  color: var(--text-primary);
  background: rgba(255, 255, 255, 0.9);
  box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.05), 0 1px 4px rgba(0, 0, 0, 0.05);
  transition: box-shadow 0.2s, background 0.2s;
  min-height: 48px; /* Consistent height for inputs and selects */
  box-sizing: border-box;
}

.form-field input:focus,
.form-field select:focus {
  background: #fff;
  box-shadow: 0 0 0 3px rgba(124, 58, 237, 0.2), 0 2px 6px rgba(0, 0, 0, 0.1);
  outline: none;
}

.form-field input[readonly] {
  background: #f3f4f6;
  cursor: not-allowed;
}

.edit-field-btn {
  background: linear-gradient(145deg, #7c3aed, #6d28d9);
  color: #fff;
  border: none;
  padding: 8px 16px;
  border-radius: 8px;
  font-size: 0.95rem;
  font-weight: 500;
  cursor: pointer;
  transition: transform 0.1s, box-shadow 0.2s;
  height: 40px; /* Match input height for alignment */
  display: flex;
  align-items: center;
  justify-content: center;
}

.edit-field-btn:hover {
  transform: translateY(-1px);
  box-shadow: 0 2px 8px rgba(124, 58, 237, 0.3);
}

.personal-details,
.mental-health-goals {
  padding: 24px;
}

.checkbox-container {
  display: flex;
  flex-wrap: wrap;
  gap: 20px;
  width: 100%;
}

.checkbox-option {
  display: flex;
  align-items: center;
  gap: 12px;
  background: rgba(255, 255, 255, 0.7);
  padding: 10px 16px;
  border-radius: 8px;
  border: 1px solid var(--glass-border);
  transition: background 0.2s, box-shadow 0.2s;
  min-width: 200px; /* Ensures consistent width for alignment */
}

.checkbox-option:hover {
  background: rgba(255, 255, 255, 0.95);
  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.05);
}

.checkbox-option input {
  width: 18px;
  height: 18px;
  accent-color: var(--primary);
  margin: 0; /* Remove default margin for better alignment */
}

.checkbox-option label {
  font-size: 0.95rem;
  color: var(--text-primary);
  font-weight: 500;
  width: auto;
  line-height: 1.5;
}

.form-field select {
  appearance: none;
  background: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24"><path fill="%23374151" d="M7 10l5 5 5-5z"/></svg>') no-repeat right 16px center;
  background-size: 12px;
}

.form-actions {
  display: flex;
  justify-content: flex-end;
  align-items: center;
  margin-top: 20px;
  width: 100%;
}

.save-btn {
  background: linear-gradient(145deg, #7c3aed, #6d28d9);
  color: #fff;
  border: none;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 20px 20px;
  border-radius: 8px;
  font-size: 1.2rem;
  font-weight: 500;
  cursor: pointer;
  transition: transform 0.1s, box-shadow 0.2s;
  height: 58px; /* Match input height for alignment */
  align-self: center;
}

.save-btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 2px 8px rgba(124, 58, 237, 0.3);
}

.privacy-security {
  padding: 24px;
}

.action-group {
  display: flex;
  flex-direction: column;
  gap: 25px;
  width: 100%;
  align-items: center;
}

.action-btn {
  background: linear-gradient(145deg, rgba(255, 255, 255, 0.9), rgba(240, 240, 240, 0.9));
  color: var(--text-primary);
  border: 1px solid var(--glass-border);
  padding: 10px 20px;
  border-radius: 8px;
  font-size: 0.95rem;
  font-weight: 500;
  cursor: pointer;
  transition: transform 0.1s, box-shadow 0.2s;
  width: 100%;
  max-width: 300px; /* Consistent width for alignment */
  height: 48px; /* Match other buttons for alignment */
  display: flex;
  align-items: center;
  justify-content: center;
  text-align: center;
}

.action-btn:hover {
  transform: translateY(-1px);
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.action-btn.delete {
  background: linear-gradient(145deg, #fee2e2, #fecaca);
  color: #ef4444;
  border-color: #ef4444;
}

.action-btn.delete:hover {
  background: #ef4444;
  color: #fff;
  box-shadow: 0 2px 8px rgba(239, 68, 68, 0.3);
}

.cta-message {
  background: linear-gradient(145deg, rgba(255, 255, 255, 0.95), rgba(255, 255, 255, 0.85));
  border-radius: 12px;
  padding: 20px;
  text-align: center;
  border: 1px solid var(--glass-border);
  backdrop-filter: blur(10px);
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);
}

.cta-message p {
  font-size: 1rem;
  color: var(--text-primary);
}

@media (max-width: 900px) {
  .profile-content {
    flex-direction: column;
    align-items: center;
    gap: 32px;
  }

  .form-field {
    flex-direction: column;
    align-items: flex-start;
    gap: 12px;
  }

  .form-field label {
    width: auto;
    font-size: 0.95rem;
  }

  .form-field input,
  .form-field select,
  .input-container {
    width: 100%;
    min-height: 44px; /* Slightly smaller for mobile */
  }

  .edit-field-btn,
  .save-btn {
    height: 44px; /* Match mobile input height */
    width: 100%;
    max-width: 120px; /* Prevent buttons from being too wide */
  }

  .personal-details,
  .mental-health-goals,
  .privacy-security {
    padding: 20px;
  }

  .checkbox-container {
    flex-direction: column;
    gap: 16px;
    align-items: flex-start;
  }

  .checkbox-option {
    width: 100%;
    max-width: 300px; /* Consistent width on mobile */
  }

  .form-actions {
    justify-content: center;
  }

  .action-group {
    align-items: center;
  }

  .action-btn {
    max-width: 100%; /* Full width on mobile for better alignment */
  }

  .card-header {
    flex-direction: column;
    align-items: flex-start;
    gap: 8px;
    padding: 16px 20px;
  }

  .status-indicator {
    min-width: auto;
    width: fit-content;
    padding: 4px 10px;
  }
}

@media (max-width: 600px) {
  .profile-picture img {
    width: 100px;
    height: 100px;
  }

  .profile-header h2 {
    font-size: 1.6rem;
  }

  .card-header h3 {
    font-size: 1.2rem;
  }

  .form-field input,
  .form-field select {
    font-size: 0.95rem;
    padding: 10px 14px;
    min-height: 40px;
  }

  .edit-field-btn,
  .save-btn,
  .action-btn {
    font-size: 0.9rem;
    padding: 8px 16px;
    height: 40px;
  }

  .status-indicator {
    font-size: 0.85rem;
  }

  .checkbox-option {
    padding: 8px 14px;
  }
}
```

# File: static/css/progress.css
```css
/* CSS Variables for consistency */
:root {
  --primary: #7c3aed;
  --secondary: #f9faff;
  --accent: #d4bfff;
  --glass-bg: rgba(255, 255, 255, 0.9);
  --glass-border: rgba(200, 200, 200, 0.3);
  --shadow: 0 10px 30px rgba(0, 0, 0, 0.05);
  --header-bg: linear-gradient(90deg, #a78bfa 0%, #c084fc 100%);
  --text-primary: #1f2937;
  --text-secondary: #6b7280;
}

/* General reset */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: 'Inter', sans-serif;
}

/* Body styling */
body {
  background: var(--secondary);
  display: flex;
  min-height: 100vh;
}

/* App container */
.app-container {
  display: flex;
  min-height: 100vh;
  width: 100%;
}

/* Sidebar */
.sidebar {
  width: 260px;
  background: var(--glass-bg);
  backdrop-filter: blur(10px);
  border-right: 1px solid var(--glass-border);
  padding: 24px;
  display: flex;
  flex-direction: column;
  gap: 32px;
  position: fixed;
  height: 100vh;
  z-index: 100;
}

.logo {
  display: flex;
  align-items: center;
  gap: 12px;
}

.logo i {
  font-size: 2rem;
  color: var(--primary);
}


.logo h1 span {
  color: var(--primary);
}

.sidebar nav {
  display: flex;
  flex-direction: column;
  gap: 12px;
}

.sidebar nav a {
  color: var(--text-primary);
  text-decoration: none;
  font-size: 1rem;
  font-weight: 500;
  padding: 12px 16px;
  border-radius: 8px;
  display: flex;
  align-items: center;
  gap: 12px;
  transition: background 0.3s, color 0.3s;
}

.sidebar nav a:hover,
.sidebar nav a.active {
  background: var(--primary);
  color: #fff;
}

/* Wrapper for content */
.wrapper {
  flex: 1;
  margin-left: 260px;
  display: flex;
  flex-direction: column;
  min-height: 100vh;
}

/* Main content */
.main-content {
  flex: 1;
  padding: 24px;
  width: 1200px;
  width: 100%;
  margin: 0 auto; 
}

/* Header */
header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 16px 24px;
  background: var(--header-bg);
  border-radius: 12px;
  backdrop-filter: blur(10px);
  border: 1px solid var(--glass-border);
  margin-bottom: 24px;
}

.search-bar {
  display: flex;
  align-items: center;
  gap: 16px;
  background: rgba(255, 255, 255, 0.3);
  padding: 14px 20px;
  border-radius: 10px;
  width: 450px;
  max-width: 100%;
}

.search-bar i {
  color: #fff;
  font-size: 1.5rem;
}

.search-bar input {
  background: transparent;
  border: none;
  color: #fff;
  font-size: 1.2rem;
  outline: none;
  width: 100%;
}

.search-bar input::placeholder {
  color: rgba(255, 255, 255, 0.7);
  font-size: 1.2rem;
}

.profile {
  display: flex;
  align-items: center;
  gap: 12px;
  cursor: pointer;
}

.profile img {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  border: 2px solid #fff;
  object-fit: cover;
}

.profile span {
  color: #fff;
  font-size: 1rem;
  font-weight: 500;
}

.profile i {
  color: #fff;
  font-size: 1.2rem;
}

/* Stats section */
.stats-section {
  margin-bottom: 32px;
}

.stats-section h2 {
  font-size: 32px;
  font-weight: 600;
  color: var(--text-primary);
  margin-bottom: 24px;
  display: flex;
  align-items: center;
  gap: 12px;
}

.stats-section h2 i {
  color: var(--primary);
  font-size: 2.2rem;
}

.stats-boxes {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
  gap: 30px;
  width: 100%; }

.stat-box {
  background: var(--glass-bg);
  border-radius: 16px;
  height: 120px;
  padding: 24px;
  border: 5px solid var(--glass-border);
  backdrop-filter: blur(12px);
  box-shadow: var(--shadow);
  display: flex;
  align-items: center;
  gap: 16px;
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.stat-box:hover {
  transform: translateY(-8px);
  box-shadow: 0 12px 40px rgba(0, 0, 0, 0.1);
}

.stat-box i {
  font-size: 2.2rem;
  color: var(--primary);
  background: var(--secondary);
  border-radius: 12px;
  padding: 12px;
  min-width: 48px;
  min-height: 48px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.stat-box h3 {
  font-size: 25px;
  font-weight: 600;
  color: var(--text-primary);
  margin-bottom: 8px;
}

.stat-box p {
  font-size: 20px;
  color: var(--text-secondary);
  font-weight: 500;
  line-height: 1.5;
  letter-spacing: 1px;
}

/* Chart section */
.chart-section {
  margin-bottom: 32px;
}

.chart-section h2 {
  font-size: 32px;
  font-weight: 600;
  color: var(--text-primary);
  margin-bottom: 24px;
  display: flex;
  align-items: center;
  gap: 12px;
}

.chart-section h2 i {
  color: var(--primary);
  font-size: 2rem;
}

.chart-card {
  background: var(--glass-bg);
  border-radius: 16px;
  padding: 24px;
  border: 1px solid var(--glass-border);
  backdrop-filter: blur(12px);
  box-shadow: var(--shadow);
  transition: transform 0.3s ease, box-shadow 0.3s ease;
  width: 100%; /* Ensure chart takes full width */
  height:600px;
}

.chart-card:hover {
  transform: translateY(-8px);
  box-shadow: 10px 12px 40px rgba(0, 0, 0, 0.1);
}

/* Insights section */
.insights-section {
  margin-bottom: 32px;
}

.insights-section h2 {
  font-size: 30px;
  font-weight: 600;
  color: var(--text-primary);
  margin-bottom: 24px;
  display: flex;
  align-items: center;
  gap: 12px;
}

.insights-section h2 i {
  color: var(--primary);
  font-size: 2rem;
}

.insights-content {
  background: var(--glass-bg);
  border-radius: 16px;
  padding: 24px;
  border: 1px solid var(--glass-border);
  backdrop-filter: blur(12px);
  box-shadow: var(--shadow);
  font-size: 1rem;
  color: var(--text-primary);
  line-height: 1.5;
  width: 100%; /* Ensure insights takes full width */
}

/* Footer */
footer {
  text-align: center;
  padding: 20px;
  background: var(--glass-bg);
  color: var(--text-primary);
  font-size: 0.9rem;
  backdrop-filter: blur(4px);
  border-top: 1px solid var(--glass-border);
  margin-top: auto;
  width: 100%;
}
/* Responsive design */
@media (max-width: 900px) {
  .sidebar {
    width: 80px;
    align-items: center;
  }
  .sidebar .logo h1 {
    display: none;
  }
  .sidebar nav a {
    justify-content: center;
    padding: 12px;
  }
  .sidebar nav a span {
    display: none;
  }
  .wrapper {
    margin-left: 80px;
  }
  .main-content {
    padding: 16px;
  }
  .search-bar {
    width: 300px;
  }
  .stats-boxes {
    grid-template-columns: 1fr;
  }
}
@media (max-width: 600px) {
  .sidebar {
    width: 100%;
    height: auto;
    position: static;
    flex-direction: row;
    justify-content: space-between;
    padding: 16px;
  }
  .sidebar nav {
    flex-direction: row;
    gap: 8px;
  }
  .wrapper {
    margin-left: 0;
  }
  .main-content {
    padding: 16px;
  }
  .stats-section h2,
  .chart-section h2,
  .insights-section h2 {
    font-size: 1.6rem;
  }

  .stat-box,
  .chart-card,
  .insights-content {
    padding: 16px;
  }

  .search-bar {
    width: 100%;
    padding: 10px 16px;
  }

  .search-bar i {
    font-size: 1.2rem;
  }

  .search-bar input,
  .search-bar input::placeholder {
    font-size: 1rem;
  }
}

.sidebar nav a {
  color: var(--text-primary);
  text-decoration: none;
  font-size: 1.3rem;
  font-weight: 500;
  padding: 12px 16px;
  border-radius: 8px;
  display: flex;
  align-items: center;
  gap: 18px;
  transition: all 0.3s ease;
}
```

# File: static/css/settings.css
```css
:root {
  --primary: #7c3aed;
  --secondary: #f9faff;
  --glass-bg: rgba(255, 255, 255, 0.9);
  --glass-border: rgba(200, 200, 200, 0.3);
  --shadow: 0 10px 30px rgba(0, 0, 0, 0.05);
  --text-primary: #1f2937;
  --text-secondary: #6b7280;
}

.settings-section {
  margin-top: 20px;
}

.settings-section h2 {
  font-size: 32px;
  font-weight: 600;
  color: var(--text-primary);
  margin-bottom: 20px;
  display: flex;
  align-items: center;
  gap: 12px;
}

.settings-section h2 i {
  color: var(--primary);
  font-size: 2rem;
}

.settings-card {
  background: var(--glass-bg);
  border-radius: 16px;
  padding: 24px;
  border: 1px solid var(--glass-border);
  backdrop-filter: blur(12px);
  box-shadow: var(--shadow);
  margin-bottom: 30px;
}

.settings-group {
  margin-bottom: 24px;
}

.settings-group h3 {
  font-size: 25px;
  color: var(--text-primary);
  margin-bottom: 15px;
  display: flex;
  align-items: center;
  gap: 8px;
}

.settings-group h3 i {
  color: var(--primary);
}

.form-group {
  margin-bottom: 15px;
}

.form-group label {
  display: block;
  color: var(--text-primary);
  font-size: 18px;
  font-weight: 500;
  margin-bottom: 5px;
}

.form-group input,
.form-group select {
  width: 100%;
  padding: 12px;
  border: 1px solid #c7bbe4;
  border-radius: 8px;
  font-size: 16px;
  background-color: #f4f0fa;
  color: var(--text-primary);
  transition: border-color 0.3s ease;
}

.form-group input:focus,
.form-group select:focus {
  border-color: var(--primary);
  outline: none;
}

.toggle-group {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.toggle-wrapper {
  position: relative;
  width: 50px;
  height: 24px;
}

.toggle-wrapper input {
  opacity: 0;
  width: 0;
  height: 0;
}

.toggle-slider {
  position: absolute;
  cursor: pointer;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: #ccc;
  border-radius: 12px;
  transition: background-color 0.3s ease;
}

.toggle-slider:before {
  position: absolute;
  content: "";
  height: 18px;
  width: 18px;
  left: 3px;
  bottom: 3px;
  background-color: white;
  border-radius: 50%;
  transition: transform 0.3s ease;
}

.toggle-wrapper input:checked + .toggle-slider {
  background-color: var(--primary);
}

.toggle-wrapper input:checked + .toggle-slider:before {
  transform: translateX(26px);
}

.neuroaid-btn {
  background-color: var(--primary);
  color: white;
  border: none;
  padding: 15px 30px;
  border-radius: 8px;
  cursor: pointer;
  font-size: 16px;
  font-weight: 600;
  transition: background-color 0.3s ease, transform 0.3s ease;
  display: flex;
  align-items: center;
  gap: 8px;
}

.neuroaid-btn:hover {
  background-color: #6d28d9;
  transform: translateY(-2px);
}

.error-message,
.success-message {
  padding: 15px;
  border-radius: 8px;
  margin-bottom: 20px;
  font-size: 16px;
}

.error-message {
  background-color: #fee2e2;
  color: #dc2626;
}

.success-message {
  background-color: #d1fae5;
  color: #10b981;
}

/* Action Group for Privacy & Security */
.action-group {
  display: flex;
  flex-wrap: wrap;
  gap: 15px;
}

.action-btn {
  background-color: var(--primary);
  color: white;
  border: none;
  padding: 10px 20px;
  border-radius: 8px;
  cursor: pointer;
  font-size: 16px;
  font-weight: 500;
  transition: background-color 0.3s ease, transform 0.3s ease;
}

.action-btn:hover {
  background-color: #6d28d9;
  transform: translateY(-2px);
}

.action-btn.delete {
  background-color: #dc2626;
}

.action-btn.delete:hover {
  background-color: #b91c1c;
}

/* Responsive Design */
@media (max-width: 600px) {
  .settings-section h2 {
    font-size: 28px;
  }

  .settings-group h3 {
    font-size: 22px;
  }

  .form-group label {
    font-size: 16px;
  }

  .form-group input,
  .form-group select {
    font-size: 14px;
    padding: 10px;
  }

  .neuroaid-btn {
    padding: 12px 20px;
    font-size: 14px;
  }

  .action-btn {
    padding: 8px 16px;
    font-size: 14px;
  }
}
```

# File: static/css/setup_2fa.css
```css
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: 'Poppins', sans-serif;
  background-color: #D6E0FA;
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
}

.login-container {
  display: flex;
  width: 100%;
  max-width: 1200px; /* Increased from 900px to make layout bigger */
  min-height: 650px; /* Increased from 500px */
  background-color: #fff;
  box-shadow: 20px 20px 20px rgba(0, 0, 0, 0.1);
  border-radius: 10px;
  overflow: hidden;
}

.branding {
  flex: 1;
  background-color: #e0dddd;
  display: flex; /* Added to center the h1 */
  justify-content: center;
  align-items: center;
}

.branding h1 {
  font-size: 85px; /* Increased from 36px to make it bigger */
  font-weight: 600;
  text-align: center;
  margin-bottom: 0; /* No margin needed since it's centered */
}

.branding h1 span {
  color: #3F51B5;
}

.login-box {
  flex: 1;
  padding: 20px; /* Reduced from 40px to reduce white space */
  display: flex;
  border-radius: 30px;
  flex-direction: column;
  justify-content: center;
  background-color: #fff;
}

.login-box h2 {
  font-size: 30px; /* Increased from 24px */
  font-weight: 500;
  text-align: center;
  margin-bottom: 10px; /* Reduced from 20px to reduce white space */
}

.login-box p {
  font-size: 18px; /* Increased from 16px */
  color: #666;
  text-align: center;
  margin-bottom: 10px; /* Reduced from 20px */
}

.qr-container {
  display: flex;
  justify-content: center;
  margin-bottom: 10px; /* Reduced from 20px */
}

.qr-container img {
  max-width: 300px; /* Increased from 200px to make it bigger */
  height: auto;
}

.secret-code {
  font-family: 'Poppins', monospace;
  background-color: #f5f5f5;
  padding: 12px; /* Slightly increased for larger appearance */
  border-radius: 5px;
  text-align: center;
  margin-bottom: 10px; /* Reduced from 20px */
  font-size: 18px; /* Increased from 16px */
  color: #333;
  word-break: break-all;
}

button,
a {
  width: 100%;
  padding: 15px; /* Increased from 12px */
  background-color: #3F51B5;
  color: #fff;
  border: none;
  border-radius: 5px;
  font-size: 18px; /* Increased from 16px */
  font-weight: 500;
  cursor: pointer;
  text-align: center;
  text-decoration: none;
  transition: background-color 0.3s ease;
  margin-top: 0;
}

button:hover,
a:hover {
  background-color: #2c3e50;
}

.login-link,
.signup-link {
  text-align: center;
  margin-top: 10px; /* Reduced from 20px */
  font-size: 16px; /* Increased from 14px */
  color: #666;
}

.login-link a,
.signup-link a {
  color: #3F51B5;
  text-decoration: none;
  font-weight: 500;
}

.login-link a:hover,
.signup-link a:hover {
  text-decoration: underline;
}

.error {
  font-size: 16px; /* Increased from 14px */
  color: #b71c1c;
  text-align: center;
  margin-bottom: 10px; /* Reduced from 20px */
}

.abc {
  margin-bottom: 10px; /* Reduced from 20px */
}

@media (max-width: 768px) {
  .login-container {
    flex-direction: column;
    max-width: 100%;
    min-height: auto;
    border-radius: 0;
  }

  .branding {
    display: none; /* Hide branding on mobile to save space */
  }

  .login-box {
    padding: 20px;
    width: 100%;
  }

  .login-box h2 {
    font-size: 26px; /* Adjusted for mobile */
  }

  .login-box p {
    font-size: 16px; /* Adjusted for mobile */
  }

  .qr-container img {
    max-width: 200px; /* Adjusted for mobile */
  }

  .secret-code {
    font-size: 16px; /* Adjusted for mobile */
  }

  button,
  a {
    font-size: 16px; /* Adjusted for mobile */
  }

  .error {
    font-size: 14px; /* Adjusted for mobile */
  }
}
```

# File: static/css/signup.css
```css
:root {
  /* Color scheme variables for easy theme management */
  --lavender: #e6d0ec;
  --purple: #b27dd3;
  --light-bg: #f9f6fc;
  --dark: #2c2c2c;
  --muted-gray: #78768b;
  --mint: #daf7f5;
  --gradient: linear-gradient(135deg, #e6d0ec, #c4a3d8);
}

/* General reset and box-sizing settings */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: 'Poppins', sans-serif;
}

/* Body styling to set the gradient background and centering of content */
body {
  background: var(--gradient); 
  min-height: 100vh; 
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 30px; 
}

/* Main login container with flex layout */
.login-container {
  width: 1200px;
  height: 700px;
  display: flex;
  background: var(--light-bg); 
  border-radius: 30px; 
  box-shadow: 0 40px 60px rgba(0, 0, 0, 0.15); 
  overflow: hidden; 
  animation: fadeIn 1s ease forwards; 
}

/* Branding section, left part of the page */
.branding {
  flex: 1; 
  background: var(--purple);
  color: white;
  padding: 60px; 
  display: flex; 
  flex-direction: column;
  justify-content: center;
  align-items: center;
  clip-path: polygon(0% 0, 100% 0, 85% 100%, 0% 100%); 
}

/* Login box where the form resides */
.login-box {
  flex: 1.2; 
  padding: 80px 60px; 
  display: flex;
  flex-direction: column; 
  justify-content: center;
}

/* Main heading style */
.login-box h1 {
  text-align: center;
  margin-bottom: 100px; /* Space below the heading */
  font-size: 5rem;
  font-weight: 600;
  letter-spacing: 1px;
  animation: slideIn 1s ease forwards; 
}

/* Specific style for the span in the heading */
.login-box h1 span {
  color: red;
}

/* Tagline styling */
.login-box p {
  font-size: 1.5rem;
  text-align: center;
  position: relative;
  bottom: 75px;
  opacity: 0.9;
  animation: fadeIn 1.2s ease forwards; 
}

/* Subheading style for 'Login' */
.login-box h2 {
  font-size: 2.5rem;
  font-weight: 600;
  text-align: center;
  position: relative;
  bottom: 55px;
  margin-bottom: 40px;
  color: var(--dark);
}

/* Form container styling */
form {
  position: relative;
  bottom: 60px; 
  display: flex;
  flex-direction: column; 
  gap: 24px; /* Space between inputs */
}

/* input field */
.input-group {
  position: relative; 
}

.input-group input {
  width: 100%; 
  padding: 16px 14px; 
  border-radius: 14px;
  border: 1.5px solid var(--muted-gray); 
  background: transparent; 
  color: var(--dark); 
  font-size: 1rem;
  transition: border-color 0.3s ease, background 0.3s ease; 
}

/* Focused input field styling */
.input-group input:focus {
  border-color: var(--purple); 
  background-color: #f5effb; 
}

/* Label styling for inputs */
.input-group label {
  position: absolute;
  left: 16px;
  top: 50%;
  transform: translateY(-50%);
  color: var(--muted-gray);
  background: var(--light-bg); 
  padding: 0 6px;
  transition: all 0.25s ease;
  pointer-events: none; 
}

/* When the input is focused or filled, adjust the label position */
.input-group input:focus + label,
.input-group input:not(:placeholder-shown) + label {
  top: -10px;
  left: 12px;
  font-size: 0.8rem;
  color: var(--purple); 
}

/*submit button */
button {
  padding: 16px;
  border: none;
  background: var(--dark); 
  color: white;
  font-size: 1rem;
  border-radius: 14px;
  cursor: pointer;
  transition: background 0.3s ease, transform 0.2s ease; 
}

/* Button hover effect */
button:hover {
  background-color: var(--muted-gray); 
  transform: translateY(-2px);
}

/* Link to sign-up page styling */
.signup-link {
  margin-top: 20px;
  text-align: center;
  font-size: 1rem;
  color: var(--muted-gray);
  position: relative;
  bottom: 50px;
}

/* Styling for the sign-up link */
.signup-link a {
  color: #000;
  font-weight: 500;
  text-decoration: none;
}

/* sign-up link on hover */
.signup-link a:hover {
  text-decoration: underline;
}

.login-link {
  margin-top: 20px;
  text-align: center;
  font-size: 1rem;
  color: var(--muted-gray);
  position: relative;
  bottom: 50px;
}

/* Styling for the sign-up link */
.login-link a {
  color: #000;
  font-weight: 500;
  text-decoration: none;
}

/* sign-up link on hover */
.login-link a:hover {
  text-decoration: underline;
}

/* Animations */
@keyframes fadeIn {
  0% { opacity: 0; transform: scale(0.96); }
  100% { opacity: 1; transform: scale(1); }
}

@keyframes slideIn {
  from { transform: translateY(-20px); opacity: 0; }
  to { transform: translateY(0); opacity: 1; }
}

/* Responsive styling for smaller screens */
@media (max-width: 1000px) {
  
  .login-container {
      flex-direction: column;
      height: auto;
  }

  
  .branding {
      clip-path: none;
      border-radius: 30px 30px 0 0;
  }


  .login-box {
      padding: 60px 30px;
  }
}

```

# File: static/css/verify_2fa.css
```css
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: 'Poppins', sans-serif;
  background-color: #D6E0FA;
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
}

.login-container {
  display: flex;
  width: 100%;
  max-width: 900px;
  min-height: 400px;
  background-color: #fff;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.15);
  border-radius: 10px;
  overflow: hidden;
}

.branding {
  flex: 1;
  background-color: #f5f5f5;
}

.login-box {
  flex: 1;
  padding: 30px;
  display: flex;
  flex-direction: column;
  justify-content: center;
  background-color: #fff;
}

.login-box h1 {
  font-size: 32px;
  font-weight: 600;
  text-align: center;
  margin-bottom: 8px;
  color: #2D2D2D;
}

.login-box h1 span {
  color: #3F51B5;
}

.login-box p {
  font-size: 15px;
  color: #666;
  text-align: center;
  margin-bottom: 15px;
}

.login-box h2 {
  font-size: 22px;
  font-weight: 500;
  text-align: center;
  margin-bottom: 15px;
  color: #3F51B5;
}

.input-group {
  position: relative;
  margin-bottom: 20px;
}

.input-group input {
  width: 100%;
  padding: 12px 15px; /* Increased padding for more space */
  font-size: 16px;
  border: 1px solid #ccc;
  border-radius: 5px;
  outline: none;
  transition: border-color 0.3s ease, box-shadow 0.3s ease;
  text-align: center;
}

.input-group input:focus {
  border-color: #3F51B5;
  box-shadow: 0 0 5px rgba(63, 81, 181, 0.3);
}

.input-group label {
  position: absolute;
  top: 50%;
  left: 15px;
  transform: translateY(-50%);
  font-size: 16px;
  color: #999;
  pointer-events: none;
  transition: all 0.3s ease;
  background-color: transparent;
}

.input-group input:focus + label,
.input-group input:not(:placeholder-shown) + label {
  top: -12px; /* Moved higher to avoid overlap */
  font-size: 12px;
  color: #3F51B5;
  background-color: #fff;
  padding: 2px 6px; /* Increased padding for better coverage */
}

button {
  width: 100%;
  padding: 10px;
  background-color: #3F51B5;
  color: #fff;
  border: none;
  border-radius: 5px;
  font-size: 15px;
  font-weight: 500;
  cursor: pointer;
  transition: background-color 0.3s ease, transform 0.1s ease;
  margin-top: 10px;
}

button:hover {
  background-color: #2c3e50;
  transform: translateY(-2px);
}

.error {
  color: #b71c1c;
  text-align: center;
  margin-top: 10px;
  font-size: 14px;
  background-color: #ffebee;
  padding: 5px 10px;
  border-radius: 5px;
}

@media (max-width: 768px) {
  .login-container {
    flex-direction: column;
    max-width: 100%;
    min-height: auto;
    border-radius: 0;
  }

  .branding {
    display: none;
  }

  .login-box {
    padding: 20px;
    width: 100%;
  }

  .login-box h1 {
    font-size: 28px;
  }

  .login-box h2 {
    font-size: 20px;
  }
}
```

# File: static/css/vibe.css
```css
.music-box {
    background: var(--card-bg, #ffffff);
    border-radius: 12px;
    padding: 20px;
    margin-top: 20px;
    text-align: center;
    box-shadow: var(--shadow, 0 2px 5px rgba(0, 0, 0, 0.1));
}

.music-box h3 {
    margin: 0 0 10px;
    font-size: 2rem;
    color: var(--text-primary, #1f2937);
}

.music-box p {
    color: var(--text-secondary, #6b7280);
    font-size: 1rem;
}

.selector-group {
    display: flex;
    gap: 15px;
    margin-bottom: 20px;
    align-items: center;
    justify-content: center;
}

.selector-group label {
    font-weight: 500;
    font-size: 26px;
    color: var(--text-primary, #1f2937);
    margin-right: 10px;
    margin-top: 25px;
}

.selector-group select {
    padding: 12px 18px;
    border-radius: 8px;
    border: 1px solid var(--glass-border, #e5e7eb);
    background: var(--secondary, #f9faff);
    color: var(--text-primary, #1f2937);
    font-size: 1rem;
    cursor: pointer;
    margin-top:25px;
}

.selector-group select:focus {
    outline: none;
    border-color: var(--primary, #7c3aed);
}

.music-recommendations-section h2 {
    font-size: 42px;
    display: flex;
    align-items: center;
    gap: 8px;
    color: var(--text-primary, #1f2937);
}
```

# File: static/css/welcome.css
```css
.welcome-container {
    display: flex;
    align-items: center;
    gap: 15px;
    flex-grow: 1;
}

.welcome-text {
    font-size: 25px;
    font-weight: 600;
    color: #2d2d2d;
    animation: fadeIn 2.5s ease-in-out forwards;
    animation: fadeOut 2.5s ease-in-out forwards;
}

@keyframes fadeOut {
    0% { opacity: 1; }
    80% { opacity: 1; }
    100% { opacity: 0; visibility: hidden; }
}

.quote-text {
    font-size: 24px;
    color: #333131;
    opacity: 0;
    visibility: hidden;
    animation: fadeIn 1s ease-in-out 3.5s forwards;
}

@keyframes fadeIn {
    0% { opacity: 0; visibility: hidden; }
    100% { opacity: 1; visibility: visible; }
}

/* Theme-specific styles */
.theme-dark .welcome-text {
    color: #ffffff;
}

.theme-dark .quote-text {
    color: #cccccc;
}

.theme-calming .welcome-text {
    color: #7c3aed;
}

.theme-calming .quote-text {
    color: #5b2cb3;
}
```

# File: static/css/themes/calming.css
```css
:root {
  --primary: #4c68d7;
  --secondary: #e6f3fa;
  --accent: #a3bffa;
  --glass-bg: rgba(240, 248, 255, 0.9);
  --glass-border: rgba(150, 200, 255, 0.3);
  --shadow: 0 10px 30px rgba(0, 0, 0, 0.05);
  --header-bg: linear-gradient(90deg, #4c68d7 0%, #81a1c1 100%);
  --text-primary: #2d3748;
  --text-secondary: #718096;
  --background: #e6f0fa;
}
```

# File: static/css/themes/dark.css
```css
:root {
  --primary: #a78bfa;
  --secondary: #2d3748;
  --accent: #b794f4;
  --glass-bg: rgba(45, 55, 72, 0.8);
  --glass-border: rgba(100, 100, 100, 0.5);
  --shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
  --header-bg: linear-gradient(90deg, #4c1d95 0%, #7c3aed 100%);
  --text-primary: #e2e8f0;
  --text-secondary: #a0aec0;
  --background: #1a202c;
}

/* Fix sidebar visibility in dark mode */
.sidebar {
  background: var(--glass-bg);
  border-right: 1px solid var(--glass-border);
}

.sidebar nav a {
  color: var(--text-primary);
}

.sidebar nav a:hover,
.sidebar nav a.active {
  background: var(--primary);
  color: #fff;
}

.logo h1,
.logo h1 span {
  color: var(--text-primary);
}
```

# File: static/css/themes/light.css
```css
:root {
  --primary: #7c3aed;
  --secondary: #f9faff;
  --accent: #d4bfff;
  --glass-bg: rgba(255, 255, 255, 0.9);
  --glass-border: rgba(200, 200, 200, 0.3);
  --shadow: 0 10px 30px rgba(0, 0, 0, 0.05);
  --header-bg: linear-gradient(90deg, #a78bfa 0%, #c084fc 100%);
  --text-primary: #1f2937;
  --text-secondary: #6b7280;
  --background: #f3f4f6;
}
```

# File: static/js/dropdown.js
```js
document.addEventListener('DOMContentLoaded', () => {
    const profile = document.querySelector('.profile');
    const dropdownContent = document.querySelector('.dropdown-content');

    if (!profile || !dropdownContent) {
        console.error('Dropdown elements not found');
        return;
    }

    profile.addEventListener('click', (e) => {
        e.stopPropagation();
        dropdownContent.style.display = dropdownContent.style.display === 'block' ? 'none' : 'block';
    });

    document.addEventListener('click', (e) => {
        if (!profile.contains(e.target) && !dropdownContent.contains(e.target)) {
            dropdownContent.style.display = 'none';
        }
    });
});
```

# File: static/js/gratitude.js
```js
document.addEventListener('DOMContentLoaded', () => {
    const gratitudeForm = document.getElementById('gratitude-form');
    const gratitudeTimeline = document.getElementById('gratitude-timeline');
    const streakElement = document.getElementById('gratitude-streak');

    // Fetch and display gratitude entries and streak
    function fetchGratitudeEntries() {
        fetch('/api/gratitude')
            .then(response => response.json())
            .then(data => {
                if (data.error) {
                    gratitudeTimeline.innerHTML = `<p>Error: ${data.error}</p>`;
                    streakElement.textContent = '0 Days';
                    return;
                }

                // Display streak
                streakElement.textContent = `${data.streak} Days`;

                // Display entries
                if (data.entries.length === 0) {
                    gratitudeTimeline.innerHTML = '<p>No gratitude entries yet. Start by adding one above!</p>';
                } else {
                    gratitudeTimeline.innerHTML = data.entries.map(entry => `
                        <div class="timeline-entry">
                            <div class="date">${entry.date}</div>
                            <div class="entry-content">
                                <p>1. ${entry.thing1}</p>
                                <p>2. ${entry.thing2}</p>
                                <p>3. ${entry.thing3}</p>
                            </div>
                        </div>
                    `).join('');
                }
            })
            .catch(error => {
                console.error('Error fetching gratitude entries:', error);
                gratitudeTimeline.innerHTML = '<p>Unable to load entries. Please try again later.</p>';
                streakElement.textContent = '0 Days';
            });
    }

    // Handle form submission
    gratitudeForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const thing1 = document.getElementById('thing1').value.trim();
        const thing2 = document.getElementById('thing2').value.trim();
        const thing3 = document.getElementById('thing3').value.trim();

        if (!thing1 || !thing2 || !thing3) {
            alert('Please fill out all fields.');
            return;
        }

        try {
            const response = await fetch('/api/gratitude', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ thing1, thing2, thing3 }),
            });
            const data = await response.json();

            if (data.success) {
                alert('Gratitude entry saved successfully!');
                gratitudeForm.reset();
                fetchGratitudeEntries(); // Refresh entries
            } else {
                alert(`Error: ${data.error || 'Failed to save entry.'}`);
            }
        } catch (error) {
            console.error('Error saving gratitude entry:', error);
            alert('Unable to save entry. Please try again later.');
        }
    });

    // Initial fetch
    fetchGratitudeEntries();
});
```

# File: static/js/journal.js
```js
document.addEventListener('DOMContentLoaded', () => {
  const quill = new Quill('#editor', {
    theme: 'snow',
    placeholder: 'Write your thoughts here...',
    modules: {
      toolbar: [
        [{ 'header': [1, 2, false] }],
        ['bold', 'italic', 'underline'],
        [{ 'list': 'ordered'}, { 'list': 'bullet' }],
        ['link'],
        ['clean']
      ]
    }
  });

  const wordCountElement = document.querySelector('.word-count');
  const journalForm = document.getElementById('journal-form');
  const journalContentInput = document.getElementById('journal-content');

  quill.on('text-change', () => {
    const text = quill.getText().trim();
    const wordCount = text ? text.split(/\s+/).length : 0;
    wordCountElement.textContent = `${wordCount} words`;
  });

    // DELETE ENTRY BUTTONS
  document.querySelectorAll('.delete-entry-btn').forEach(button => {
    button.addEventListener('click', async (event) => {
      const entryId = event.target.getAttribute('data-id');
      if (confirm('Are you sure you want to delete this journal entry?')) {
        try {
          const response = await fetch(`/delete_entry/${entryId}`, {
            method: 'DELETE',
          });

          if (response.ok) {
            // Remove the entry card from DOM
            const card = event.target.closest('.entry-card');
            card.remove();
          } else {
            alert('Failed to delete entry.');
          }
        } catch (err) {
          console.error('Error deleting entry:', err);
          alert('Something went wrong.');
        }
      }
    });
  });


  journalForm.addEventListener('submit', (event) => {
    journalContentInput.value = quill.root.innerHTML;
  });
});
```

# File: static/js/profile.js
```js
document.addEventListener('DOMContentLoaded', () => {
    // Profile picture upload
    const editPictureBtn = document.getElementById('edit-picture-btn');
    if (editPictureBtn) {
        editPictureBtn.addEventListener('click', () => {
            document.getElementById('profile-pic-input').click();
        });
    }

    const profilePicInput = document.getElementById('profile-pic-input');
    if (profilePicInput) {
        profilePicInput.addEventListener('change', async (event) => {
            const file = event.target.files[0];
            if (file) {
                const formData = new FormData();
                formData.append('profile-pic', file);
                try {
                    const response = await fetch('/upload_profile_pic', {
                        method: 'POST',
                        body: formData
                    });
                    const data = await response.json();
                    if (data.success) {
                        document.getElementById('profile-pic').src = data.url;
                        document.getElementById('header-profile-pic').src = data.url;
                    } else {
                        alert(data.error);
                    }
                } catch (error) {
                    console.error('Error uploading profile picture:', error);
                    alert('Failed to upload profile picture.');
                }
            }
        });
    }

    // Edit field functionality
    const editButtons = document.querySelectorAll('.edit-field-btn');
    if (editButtons.length === 0) {
        console.error('No edit buttons found');
    } else {
        editButtons.forEach(button => {
            button.addEventListener('click', async (event) => {
                event.preventDefault();
                const field = button.getAttribute('data-field');
                const input = document.getElementById(`${field}-input`);
                if (!input) {
                    console.error(`Input for ${field} not found`);
                    return;
                }

                const isEditing = !input.classList.contains('editable');
                console.log(`Editing ${field}: ${isEditing ? 'Starting' : 'Saving'}`);

                if (isEditing) {
                    input.disabled = false;
                    input.classList.add('editable');
                    input.focus();
                    button.textContent = 'Save';
                } else {
                    input.disabled = true;
                    input.classList.remove('editable');
                    button.textContent = 'Edit';

                    // Save the updated field to Supabase
                    const value = input.value;
                    console.log(`Saving ${field}: ${value}`);
                    try {
                        const response = await fetch('/update_profile_field', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ field, value })
                        });
                        const data = await response.json();
                        if (data.success) {
                            console.log(`${field} saved successfully`);
                            window.location.reload();
                        } else {
                            console.error(`Error saving ${field}:`, data.error);
                            alert(data.error);
                        }
                    } catch (error) {
                        console.error(`Error updating ${field}:`, error);
                        alert(`Failed to update ${field}.`);
                    }
                }
            }, { once: false });
        });
    }

    // Save personal details
    const savePersonalDetailsBtn = document.getElementById('save-personal-details');
    if (savePersonalDetailsBtn) {
        savePersonalDetailsBtn.addEventListener('click', async () => {
            const personalDetails = {
                age: document.getElementById('age-input').value || null,
                gender: document.getElementById('gender-input').value || null,
                location: document.getElementById('location-input').value || null,
                preferred_language: document.getElementById('language-input').value || null
            };
            console.log('Saving personal details:', personalDetails);
            try {
                const response = await fetch('/update_personal_details', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(personalDetails)
                });
                const data = await response.json();
                if (data.success) {
                    console.log('Personal details saved successfully');
                    alert('Personal details saved successfully!');
                    window.location.reload();
                } else {
                    console.error('Error saving personal details:', data.error);
                    alert(data.error);
                }
            } catch (error) {
                console.error('Error saving personal details:', error);
                alert('Failed to save personal details.');
            }
        });
    }

    // Save mental health goals
    const saveGoalsBtn = document.getElementById('save-goals');
    if (saveGoalsBtn) {
        saveGoalsBtn.addEventListener('click', async () => {
            const activities = Array.from(document.querySelectorAll('input[name="activities"]:checked')).map(input => input.value);
            const goals = {
                primary_goal: document.getElementById('primary-goal').value || null,
                engagement_frequency: document.getElementById('frequency').value || null,
                preferred_activities: activities
            };
            console.log('Saving mental health goals:', goals);
            try {
                const response = await fetch('/update_mental_health_goals', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(goals)
                });
                const data = await response.json();
                if (data.success) {
                    console.log('Mental health goals saved successfully');
                    alert('Mental health goals saved successfully!');
                    window.location.reload();
                } else {
                    console.error('Error saving mental health goals:', data.error);
                    alert(data.error);
                }
            } catch (error) {
                console.error('Error saving mental health goals:', error);
                alert('Failed to save mental health goals.');
            }
        });
    }
});
```

# File: static/js/progress.js
```js
document.addEventListener('DOMContentLoaded', function () {
    // Mood Chart Canvas
    const moodCanvas = document.getElementById('moodChart');
    moodCanvas.width = 900;
    moodCanvas.height = 650;

    // Confidence Chart Canvas
    const confidenceCanvas = document.getElementById('confidenceChart');
    confidenceCanvas.width = 900;
    confidenceCanvas.height = 650;

    fetch('/api/mood_data')
        .then(response => response.json())
        .then(data => {
            console.log('API Response:', data);

            // Mood Chart (Area Chart using Line with Fill)
            const moodCtx = moodCanvas.getContext('2d');
            const moodLineGradient = moodCtx.createLinearGradient(0, 0, 0, 650);
            moodLineGradient.addColorStop(0, '#FF6EC7'); // Neon pink
            moodLineGradient.addColorStop(1, '#7879F1'); // Neon purple
            const moodFillGradient = moodCtx.createLinearGradient(0, 0, 0, 650);
            moodFillGradient.addColorStop(0, 'rgba(230, 230, 250, 0.5)'); // Light violet
            moodFillGradient.addColorStop(1, 'rgba(200, 200, 240, 0.1)'); // Slightly darker violet

            const moodChart = new Chart(moodCtx, {
                type: 'line',
                data: {
                    labels: data.labels,
                    datasets: [{
                        label: 'Mood',
                        data: data.data,
                        borderColor: moodLineGradient,
                        borderWidth: 3,
                        fill: true,
                        backgroundColor: moodFillGradient,
                        tension: 0.4,
                        pointBackgroundColor: '#FFFFFF',
                        pointBorderColor: '#7879F1',
                        pointBorderWidth: 2,
                        pointRadius: 5,
                        pointHoverRadius: 8,
                        pointHoverBackgroundColor: '#FF6EC7',
                        pointHoverBorderColor: '#FFFFFF',
                        pointHoverBorderWidth: 3
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            max: 5,
                            min: 0,
                            ticks: {
                                stepSize: 1,
                                color: '#000000',
                                font: {
                                    family: "'Poppins', sans-serif",
                                    size: 17
                                }
                            },
                            grid: {
                                color: 'rgba(0, 0, 0, 0.1)',
                            },
                            title: {
                                display: true,
                                text: 'Mood Score',
                                color: '#000000',
                                font: {
                                    family: "'Poppins', sans-serif",
                                    size: 20
                                },
                                padding: 5
                            }
                        },
                        x: {
                            ticks: {
                                color: '#000000',
                                font: {
                                    family: "'Poppins', sans-serif",
                                    size: 17
                                }
                            },
                            grid: {
                                display: false
                            },
                            title: {
                                display: true,
                                text: 'Day',
                                color: '#000000',
                                font: {
                                    family: "'Poppins', sans-serif",
                                    size: 16,
                                    weight: 'bold'
                                },
                                padding: 10
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            display: true,
                            labels: {
                                font: {
                                    family: "'Poppins', sans-serif",
                                    size: 14
                                },
                                color: '#000000'
                            }
                        },
                        tooltip: {
                            enabled: false
                        }
                    },
                    animation: {
                        duration: 1500,
                        easing: 'easeOutCubic'
                    },
                    elements: {
                        line: {
                            shadowColor: 'rgba(255, 255, 255, 0.3)',
                            shadowBlur: 10,
                            shadowOffsetX: 0,
                            shadowOffsetY: 0
                        }
                    },
                    onClick: (event, elements) => {
                        if (elements.length > 0) {
                            const element = elements[0];
                            const day = data.labels[element.index];
                            alert(`Day: ${day}`);
                        }
                    }
                }
            });

            // Confidence Chart (Bar Chart)
            const confidenceCtx = confidenceCanvas.getContext('2d');
            const confidenceBarGradient = confidenceCtx.createLinearGradient(0, 0, 0, 650);
            confidenceBarGradient.addColorStop(0, '#00BFFF'); // Deep sky blue
            confidenceBarGradient.addColorStop(1, '#1E90FF'); // Dodger blue

            const confidenceChart = new Chart(confidenceCtx, {
                type: 'bar',
                data: {
                    labels: data.labels,
                    datasets: [{
                        label: 'Confidence',
                        data: data.confidence,
                        backgroundColor: confidenceBarGradient,
                        borderColor: '#FFFFFF',
                        borderWidth: 1,
                        borderRadius: 5, // Rounded corners for bars
                        barThickness: 40, // Thinner bars
                        categoryPercentage: 0.5
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            max: 1,
                            min: 0,
                            ticks: {
                                stepSize: 0.2,
                                color: '#000000',
                                font: {
                                    family: "'Poppins', sans-serif",
                                    size: 17
                                }
                            },
                            grid: {
                                color: 'rgba(0, 0, 0, 0.1)',
                            },
                            title: {
                                display: true,
                                text: 'Confidence Score',
                                color: '#000000',
                                font: {
                                    family: "'Poppins', sans-serif",
                                    size: 20
                                },
                                padding: 5
                            }
                        },
                        x: {
                            ticks: {
                                color: '#000000',
                                font: {
                                    family: "'Poppins', sans-serif",
                                    size: 17
                                }
                            },
                            grid: {
                                display: false
                            },
                            title: {
                                display: true,
                                text: 'Day',
                                color: '#000000',
                                font: {
                                    family: "'Poppins', sans-serif",
                                    size: 16,
                                    weight: 'bold'
                                },
                                padding: 10
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            display: true,
                            labels: {
                                font: {
                                    family: "'Poppins', sans-serif",
                                    size: 14
                                },
                                color: '#000000'
                            }
                        },
                        tooltip: {
                            enabled: false
                        }
                    },
                    animation: {
                        duration: 1500,
                        easing: 'easeOutCubic'
                    },
                    onClick: (event, elements) => {
                        if (elements.length > 0) {
                            const element = elements[0];
                            const day = data.labels[element.index];
                            alert(`Day: ${day}`);
                        }
                    }
                }
            });

            // Update number of entries
            const numEntriesElement = document.getElementById('entries-count');
            if (numEntriesElement) {
                numEntriesElement.textContent = `${data.numEntries} entries`;
                console.log('Number of entries updated:', data.numEntries);
            } else {
                console.error('Number of entries element not found. ID: entries-count');
            }

            // Update streak
            const streakElement = document.getElementById('streak-value');
            if (streakElement) {
                streakElement.textContent = `${data.streak} Days`;
                console.log('Streak updated:', data.streak);
            } else {
                console.error('Streak element not found. ID: streak-value');
            }
        })
        .catch(error => {
            console.error('Error fetching mood data:', error);

            // Fallback Mood Chart
            const moodCtx = moodCanvas.getContext('2d');
            const moodLineGradient = moodCtx.createLinearGradient(0, 0, 0, 650);
            moodLineGradient.addColorStop(0, '#FF6EC7');
            moodLineGradient.addColorStop(1, '#7879F1');
            const moodFillGradient = moodCtx.createLinearGradient(0, 0, 0, 650);
            moodFillGradient.addColorStop(0, 'rgba(230, 230, 250, 0.5)');
            moodFillGradient.addColorStop(1, 'rgba(200, 200, 240, 0.1)');

            new Chart(moodCtx, {
                type: 'line',
                data: {
                    labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
                    datasets: [{
                        label: 'Mood',
                        data: [3, 3, 3, 3, 3, 3, 3],
                        borderColor: moodLineGradient,
                        borderWidth: 3,
                        fill: true,
                        backgroundColor: moodFillGradient,
                        tension: 0.4,
                        pointBackgroundColor: '#FFFFFF',
                        pointBorderColor: '#7879F1',
                        pointBorderWidth: 2,
                        pointRadius: 5,
                        pointHoverRadius: 8,
                        pointHoverBackgroundColor: '#FF6EC7',
                        pointHoverBorderColor: '#FFFFFF',
                        pointHoverBorderWidth: 3
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            max: 5,
                            min: 0,
                            ticks: {
                                stepSize: 1,
                                color: '#000000',
                                font: {
                                    family: "'Poppins', sans-serif",
                                    size: 17
                                }
                            },
                            grid: {
                                color: 'rgba(0, 0, 0, 0.1)',
                            },
                            title: {
                                display: true,
                                text: 'Mood Score',
                                color: '#000000',
                                font: {
                                    family: "'Poppins', sans-serif",
                                    size: 20
                                },
                                padding: 5
                            }
                        },
                        x: {
                            ticks: {
                                color: '#000000',
                                font: {
                                    family: "'Poppins', sans-serif",
                                    size: 17
                                }
                            },
                            grid: {
                                display: false
                            },
                            title: {
                                display: true,
                                text: 'Day',
                                color: '#000000',
                                font: {
                                    family: "'Poppins', sans-serif",
                                    size: 16,
                                    weight: 'bold'
                                },
                                padding: 10
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            display: true,
                            labels: {
                                font: {
                                    family: "'Poppins', sans-serif",
                                    size: 14
                                },
                                color: '#000000'
                            }
                        },
                        tooltip: {
                            enabled: false
                        }
                    },
                    animation: {
                        duration: 1500,
                        easing: 'easeOutCubic'
                    },
                    elements: {
                        line: {
                            shadowColor: 'rgba(255, 255, 255, 0.3)',
                            shadowBlur: 10,
                            shadowOffsetX: 0,
                            shadowOffsetY: 0
                        }
                    },
                    onClick: (event, elements) => {
                        if (elements.length > 0) {
                            const element = elements[0];
                            const day = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'][element.index];
                            alert(`Day: ${day}`);
                        }
                    }
                }
            });

            // Fallback Confidence Chart
            const confidenceCtx = confidenceCanvas.getContext('2d');
            const confidenceBarGradient = confidenceCtx.createLinearGradient(0, 0, 0, 650);
            confidenceBarGradient.addColorStop(0, '#00BFFF');
            confidenceBarGradient.addColorStop(1, '#1E90FF');

            new Chart(confidenceCtx, {
                type: 'bar',
                data: {
                    labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
                    datasets: [{
                        label: 'Confidence',
                        data: [0, 0, 0, 0, 0, 0, 0],
                        backgroundColor: confidenceBarGradient,
                        borderColor: '#FFFFFF',
                        borderWidth: 1,
                        borderRadius: 5,
                        barThickness: 20
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            max: 1,
                            min: 0,
                            ticks: {
                                stepSize: 0.2,
                                color: '#000000',
                                font: {
                                    family: "'Poppins', sans-serif",
                                    size: 17
                                }
                            },
                            grid: {
                                color: 'rgba(0, 0, 0, 0.1)',
                            },
                            title: {
                                display: true,
                                text: 'Confidence Score',
                                color: '#000000',
                                font: {
                                    family: "'Poppins', sans-serif",
                                    size: 20
                                },
                                padding: 5
                            }
                        },
                        x: {
                            ticks: {
                                color: '#000000',
                                font: {
                                    family: "'Poppins', sans-serif",
                                    size: 17
                                }
                            },
                            grid: {
                                display: false
                            },
                            title: {
                                display: true,
                                text: 'Day',
                                color: '#000000',
                                font: {
                                    family: "'Poppins', sans-serif",
                                    size: 16,
                                    weight: 'bold'
                                },
                                padding: 10
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            display: true,
                            labels: {
                                font: {
                                    family: "'Poppins', sans-serif",
                                    size: 14
                                },
                                color: '#000000'
                            }
                        },
                        tooltip: {
                            enabled: false
                        }
                    },
                    animation: {
                        duration: 1500,
                        easing: 'easeOutCubic'
                    },
                    onClick: (event, elements) => {
                        if (elements.length > 0) {
                            const element = elements[0];
                            const day = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'][element.index];
                            alert(`Day: ${day}`);
                        }
                    }
                }
            });

            // Fallback for number of entries and streak
            const numEntriesElement = document.getElementById('entries-count');
            if (numEntriesElement) {
                numEntriesElement.textContent = '0 entries';
            }

            const streakElement = document.getElementById('streak-value');
            if (streakElement) {
                streakElement.textContent = '0 Days';
            }
        });
});
```

# File: static/js/settings.js
```js
document.addEventListener('DOMContentLoaded', () => {
    const themeSelect = document.getElementById('theme');
    const themeStylesheet = document.getElementById('theme-stylesheet');
    const form = document.getElementById('settings-form');
    const exportDataBtn = document.getElementById('export-data-btn');
    const deleteAccountBtn = document.getElementById('delete-account-btn');
    const errorMessage = document.querySelector('.error-message');
    const successMessage = document.querySelector('.success-message');

    // Function to display messages
    const showMessage = (type, message) => {
        if (type === 'error') {
            if (errorMessage) errorMessage.textContent = message;
            else {
                const msgDiv = document.createElement('div');
                msgDiv.className = 'error-message';
                msgDiv.textContent = message;
                form.parentNode.insertBefore(msgDiv, form);
            }
        } else {
            if (successMessage) successMessage.textContent = message;
            else {
                const msgDiv = document.createElement('div');
                msgDiv.className = 'success-message';
                msgDiv.textContent = message;
                form.parentNode.insertBefore(msgDiv, form);
            }
        }
        setTimeout(() => {
            const msg = document.querySelector(`.${type}-message`);
            if (msg) msg.remove();
        }, 5000);
    };

    // Preview theme when dropdown changes
    themeSelect.addEventListener('change', (e) => {
        const selectedTheme = e.target.value;
        themeStylesheet.href = `/static/css/themes/${selectedTheme}.css`;
    });

    // Handle form submission
    form.addEventListener('submit', async (e) => {
        e.preventDefault();
        const password = document.getElementById('password').value;
        const confirmPassword = document.getElementById('confirm_password').value;

        // Client-side password validation
        if (password && password !== confirmPassword) {
            showMessage('error', 'Passwords do not match!');
            return;
        }

        const formData = new FormData(form);
        const data = {
            email: formData.get('email'),
            password: password || null,
            two_factor_enabled: formData.get('two_factor_enabled') === 'on',
            theme: formData.get('theme'),
            reminder_time: formData.get('reminder_time'),
            notification_preference: formData.get('notification_preference')
        };

        try {
            const response = await fetch('/settings', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            });
            const result = await response.json();

            if (result.success) {
                showMessage('success', result.message || 'Settings updated successfully!');
                // Update displayed email in header
                const userMenuSpan = document.querySelector('.user-menu span');
                if (userMenuSpan) {
                    userMenuSpan.textContent = data.email.split('@')[0];
                }
                // Update theme stylesheet if changed
                themeStylesheet.href = `/static/css/themes/${data.theme}.css`;
            } else {
                showMessage('error', result.error || 'Failed to update settings.');
            }
        } catch (error) {
            console.error('Error submitting settings:', error);
            showMessage('error', 'Failed to update settings.');
        }
    });

    // Export Data button
    if (exportDataBtn) {
        exportDataBtn.addEventListener('click', async () => {
            try {
                const response = await fetch('/export_data', { method: 'GET' });
                const data = await response.json();
                if (data.success) {
                    const blob = new Blob([JSON.stringify(data.data, null, 2)], { type: 'application/json' });
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = 'neuroaid_user_data.json';
                    a.click();
                    window.URL.revokeObjectURL(url);
                    showMessage('success', 'Data exported successfully!');
                } else {
                    showMessage('error', data.error || 'Failed to export data.');
                }
            } catch (error) {
                console.error('Error exporting data:', error);
                showMessage('error', 'Failed to export data.');
            }
        });
    }

    // Delete Account button
    if (deleteAccountBtn) {
        deleteAccountBtn.addEventListener('click', async () => {
            if (confirm('Are you sure you want to delete your account? This action cannot be undone.')) {
                try {
                    const response = await fetch('/delete_account', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' }
                    });
                    const data = await response.json();
                    if (data.success) {
                        showMessage('success', 'Account deleted successfully.');
                        setTimeout(() => {
                            window.location.href = '/logout';
                        }, 2000);
                    } else {
                        showMessage('error', data.error || 'Failed to delete account.');
                    }
                } catch (error) {
                    console.error('Error deleting account:', error);
                    showMessage('error', 'Failed to delete account.');
                }
            }
        });
    }
});
```

# File: static/js/utils.js
```js
const calculateProfileCompletion = (profileData) => {
  const totalFields = 7; 
  let filledFields = 0;

  // Profile Overview
  if (profileData.name) filledFields++;
  if (profileData.email) filledFields++;
  if (profileData.username) filledFields++;

  // Personal Details
  if (profileData.age) filledFields++;
  if (profileData.gender) filledFields++;
  if (profileData.location) filledFields++;
  if (profileData.language) filledFields++;

  // Mental Health Goals
  if (profileData.primaryGoal) filledFields++;
  if (profileData.frequency) filledFields++;
  if (profileData.activities && profileData.activities.length > 0) filledFields++;

  const percentage = Math.round((filledFields / totalFields) * 100);
  return percentage;
};

const updateProgressBar = (percentage) => {
  const circle = document.querySelector('.progress-ring__circle');
  const radius = circle.r.baseVal.value; // Now 44px as per the updated SVG
  const circumference = 2 * Math.PI * radius;

  circle.style.strokeDasharray = `${circumference} ${circumference}`;
  circle.style.strokeDashoffset = circumference;

  const offset = circumference - (percentage / 100) * circumference;
  circle.style.strokeDashoffset = offset;

  const progressText = document.querySelector('.progress-text');
  progressText.textContent = `${percentage}% Complete`;
};
```

# File: static/js/vibe.js
```js
async function loadSpotifyEmbed() {
    const playerContainer = document.getElementById('spotify-player');
    try {
        const response = await fetch('/api/recommend_music');
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || 'Failed to fetch music');
        }
        const data = await response.json();
        if (data.embedUrl) {
            playerContainer.innerHTML = `
                <h3>Now Playing </h3>
                <div id="iframe-wrapper">
                    <iframe style="border-radius:12px" 
                            src="${data.embedUrl}" 
                            width="100%" 
                            height="420" 
                            frameborder="0" 
                            allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture" 
                            loading="lazy"></iframe>
                </div>`;
        } else {
            playerContainer.innerHTML = `
                <h3>Now Playing</h3>
                <p>No songs found. Try journaling to log your mood!</p>`;
        }
    } catch (error) {
        console.error('Error loading Spotify playlist:', error);
        playerContainer.innerHTML = `
            <h3>Now Playing</h3>
            <p>Error loading playlist: ${error.message}</p>`;
    }
}

async function setCurrentLanguage() {
    const languageSelect = document.getElementById('language-select');
    try {
        const response = await fetch('/api/update_language');
        if (!response.ok) throw new Error('Failed to fetch current language');
        const data = await response.json();
        if (data.language) {
            languageSelect.value = data.language;
        }
    } catch (error) {
        console.error('Error fetching current language:', error);
        languageSelect.value = 'tamil';
    }
}

document.addEventListener('DOMContentLoaded', () => {
    const languageSelect = document.getElementById('language-select');

    setCurrentLanguage().then(() => loadSpotifyEmbed());

    languageSelect.addEventListener('change', async () => {
        const language = languageSelect.value;
        try {
            const response = await fetch('/api/update_language', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ language })
            });
            if (!response.ok) {
                throw new Error('Error updating language');
            }
            await loadSpotifyEmbed();
        } catch (error) {
            console.error('Error updating language:', error);
            document.getElementById('spotify-player').innerHTML = `
                <h3>Now Playing</h3>
                <p>Error updating language: ${error.message}</p>`;
        }
    });
});
```

# File: static/js/welcome.js
```js
document.addEventListener('DOMContentLoaded', () => {
    const quoteText = document.querySelector('.quote-text');
    if (!quoteText) {
        console.error('Quote text element not found');
        return;
    }
    try {
        const quotes = [
            "You are stronger than you know.",
            "Every day is a new opportunity to grow.",
            "Take a deep breath and keep moving forward.",
            "Your mind is a powerful tool—use it wisely.",
            "Small steps lead to big changes.",
            "Embrace your journey with kindness.",
            "You are enough, just as you are.",
            "Progress, not perfection, is the goal.",
            "Find joy in the little moments.",
            "Your resilience is your superpower."
        ];
        const today = new Date();
        const dayOfYear = Math.floor((today - new Date(today.getFullYear(), 0, 0)) / (1000 * 60 * 60 * 24));
        const quoteIndex = dayOfYear % quotes.length;
        quoteText.textContent = `"${quotes[quoteIndex]}"`;
        quoteText.style.display = 'block'; // Ensure visibility
    } catch (error) {
        console.error('Error setting quote:', error);
        quoteText.textContent = '"Keep going, you’ve got this!"';
    }
});
```

# File: templates/gratitude.html
```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>NeuroAid - Gratitude Journal</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/remixicon@4.3.0/fonts/remixicon.css">
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="{{ url_for('static', filename='css/dashboard.css') }}">
  <link rel="stylesheet" href="{{ url_for('static', filename='css/gratitude.css') }}">
  <link rel="stylesheet" href="{{ url_for('static', filename='css/dropdown.css') }}">
  <link rel="stylesheet" href="{{ url_for('static', filename='css/welcome.css') }}">
  <link id="theme-stylesheet" rel="stylesheet" href="{{ url_for('static', filename='css/themes/' + theme + '.css') }}">
</head>
<body>
  <div class="app-container">
    <div class="sidebar">
      <div class="logo">
        <i class="ri-brain-line"></i>
        <h1>Neuro<span>Aid</span></h1>
      </div>
      <nav>
        <a href="{{ url_for('index') }}"><i class="ri-home-5-line"></i> Home</a>
        <a href="{{ url_for('journal') }}"><i class="ri-booklet-line"></i> Journal</a>
        <a href="{{ url_for('progress') }}"><i class="ri-bar-chart-2-line"></i> Progress</a>
        <a href="{{ url_for('vibe') }}"><i class="ri-music-2-line"></i> Vibe</a>
        <a href="{{ url_for('gratitude') }}" class="active"><i class="ri-heart-line"></i> Gratitude</a>
        <a href="{{ url_for('settings')}}"><i class="ri-settings-3-line"></i> Settings</a>
        <a href="{{ url_for('profile') }}"><i class="ri-user-line"></i> Profile</a>
        <a href="{{ url_for('logout') }}"><i class="ri-logout-box-line"></i> Logout</a>
      </nav>
    </div>

    <div class="wrapper">
      <main class="main-content">
        <header>
          <div class="welcome-container">
            <div class="welcome-text">Welcome to NeuroAid, {{ user_name }}</div>
            <div class="quote-text"></div>
          </div>
          <div class="profile-dropdown">
            <div class="profile">
              <img src="https://randomuser.me/api/portraits/men/32.jpg" alt="Profile" />
              <span>{{ session.get('user_email', 'User').split('@')[0] }}</span>
              <i class="ri-arrow-down-s-line"></i>
            </div>
            <div class="dropdown-content">
              <a href="{{ url_for('profile') }}"><i class="ri-user-line"></i> Profile</a>
              <a href="{{ url_for('settings') }}"><i class="ri-settings-3-line"></i> Settings</a>
              <a href="{{ url_for('logout') }}"><i class="ri-logout-box-line"></i> Logout</a>
            </div>
          </div>
        </header>

        <section class="gratitude-section">
          <h2><i class="ri-heart-line"></i> Gratitude Journal</h2>
          <div class="gratitude-form">
            <h3>Record Three Good Things Today</h3>
            <form id="gratitude-form">
              <label for="thing1">1. What made you smile today?</label>
              <textarea id="thing1" name="thing1" rows="2" placeholder="E.g., A kind word from a friend..."></textarea>
              <label for="thing2">2. What are you thankful for today?</label>
              <textarea id="thing2" name="thing2" rows="2" placeholder="E.g., A sunny morning walk..."></textarea>
              <label for="thing3">3. What went well today?</label>
              <textarea id="thing3" name="thing3" rows="2" placeholder="E.g., Finished a task early..."></textarea>
              <button type="submit" class="neuroaid-btn"><i class="ri-save-line"></i> Save Entry</button>
              <p class="suggestions">Not sure what to write? How about a small win, like enjoying a warm cup of tea?</p>
            </form>
          </div>

          <div class="streak-counter">
            <i class="ri-calendar-line"></i>
            <p><strong>Gratitude Streak:</strong> <span id="gratitude-streak">0 Days</span></p>
          </div>

          <div class="timeline">
            <h3>Your Positivity Log</h3>
            <div id="gratitude-timeline"></div>
          </div>
        </section>
      </main>

      <footer>
        <span>© 2025 NeuroAid. Your mental health companion.</span>
      </footer>
    </div>
  </div>
  <script src="{{ url_for('static', filename='js/gratitude.js') }}"></script>
  <script src="{{ url_for('static', filename='js/dropdown.js') }}"></script>
  <script src="{{ url_for('static', filename='js/welcome.js') }}"></script>
</body>
</html>
```

# File: templates/index.html
```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>NeuroAid - Home</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/remixicon@4.3.0/fonts/remixicon.css" />
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="{{ url_for('static', filename='css/base.css') }}">
  <link rel="stylesheet" href="{{ url_for('static', filename='css/dashboard.css') }}" />
  <link rel="stylesheet" href="{{ url_for('static', filename='css/dropdown.css') }}" />
  <link rel="stylesheet" href="{{ url_for('static', filename='css/welcome.css') }}" />
  <link id="theme-stylesheet" rel="stylesheet" href="{{ url_for('static', filename='css/themes/' + theme + '.css') }}">
</head>
<body>
  <div class="sidebar"> …sidebar contents… </div>
    <div class="sidebar">
    <div class="logo">
      <i class="ri-brain-line"></i>
      <h1>Neuro<span>Aid</span></h1>
    </div>
    <nav>
      <a href="{{ url_for('index') }}" class="active"><i class="ri-home-5-line"></i> Home</a>
      <a href="{{ url_for('journal') }}"><i class="ri-booklet-line"></i> Journal</a>
      <a href="{{ url_for('progress') }}"><i class="ri-bar-chart-2-line"></i> Progress</a>
      <a href="{{ url_for('vibe') }}"><i class="ri-music-2-line"></i> Vibe</a>
      <a href="{{ url_for('gratitude') }}"><i class="ri-heart-line"></i> Gratitude</a>
      <a href="{{ url_for('settings')}}"><i class="ri-settings-3-line"></i> Settings</a>
      <a href="{{ url_for('profile') }}"><i class="ri-user-line"></i> Profile</a>
      <a href="{{ url_for('logout') }}"><i class="ri-logout-box-line"></i> Logout</a>
    </nav>
  </div>


  <div class="wrapper">
    <main class="main-content">
      <header>
        <div class="welcome-container">
          <div class="welcome-text">Welcome to NeuroAid, {{ user_name }}</div>
          <div class="quote-text"></div>
        </div>
        <div class="profile-dropdown">
          <div class="profile">
            <img src="https://randomuser.me/api/portraits/men/32.jpg" alt="Profile" />
            <span>{{ session.get('user_email', 'User').split('@')[0] }}</span>
            <i class="ri-arrow-down-s-line"></i>
          </div>
        <div class="dropdown-content">
          <div class="user-info">
            <p><i class="ri-user-line"></i> {{ user_name }}</p>
            <p><i class="ri-mail-line"></i> {{ user_email }}</p>
            <p><i class="ri-calendar-line"></i> Joined: {{ joined_date }}</p>
          </div>
          <a href="{{ url_for('profile') }}"><i class="ri-user-line"></i> Profile</a>
          <a href="{{ url_for('settings') }}"><i class="ri-settings-3-line"></i> Settings</a>
          <a href="{{ url_for('logout') }}"><i class="ri-logout-box-line"></i> Logout</a>
        </div>
        </div>
      </header>

      <section class="home-section">
        <div class="welcome-message">
          <h2><i class="ri-home-5-line"></i> Welcome to NeuroAid</h2>
          <p>Your companion for mental health and self-reflection.</p>
        </div>

        <div class="suggestions-card">
          <h3><i class="ri-lightbulb-line"></i> Today's Suggestions</h3>
          {% if suggestions is defined and suggestions %}
            <ul>
              {% for suggestion in suggestions %}
                <li>{{ suggestion }}</li>
              {% endfor %}
            </ul>
          {% else %}
            <p>No suggestions available. Write a journal entry to get started!</p>
          {% endif %}
        </div>

        <div class="recent-reflections">
          <h3><i class="ri-booklet-line"></i> Recent Reflections</h3>
          {% if recent_entries is defined and recent_entries %}
            {% for entry in recent_entries %}
              <div class="entry-preview">
                <div class="entry-meta">{{ entry.created_at }}</div>
                <div class="entry-snippet">{{ entry.content_snippet | safe }}</div>
                <a href="{{ url_for('journal') }}">Read More</a>
              </div>
            {% endfor %}
          {% else %}
            <p>No recent entries. <a href="{{ url_for('journal') }}">Start journaling today!</a></p>
          {% endif %}
        </div>

        <div class="quick-actions">
          <a href="{{ url_for('journal') }}" class="neuroaid-btn"><i class="ri-booklet-line"></i> Write a Journal Entry</a>
          <a href="{{ url_for('progress') }}" class="neuroaid-btn"><i class="ri-bar-chart-2-line"></i> View Progress</a>
        </div>
      </section>
    </main>

    <footer>
      <span>© 2025 NeuroAid. Your mental health companion.</span>
    </footer>
  </div>

  <script src="{{ url_for('static', filename='js/dropdown.js') }}"></script>
  <script src="{{ url_for('static', filename='js/welcome.js') }}"></script>
</body>
</html>

```

# File: templates/Journal.html
```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>NeuroAid - Journal</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/remixicon@4.3.0/fonts/remixicon.css" />
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
  <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet" />
  <link rel="stylesheet" href="{{ url_for('static', filename='css/dashboard.css') }}" />
  <link rel="stylesheet" href="{{ url_for('static', filename='css/journal.css') }}" />
  <link rel="stylesheet" href="{{ url_for('static', filename='css/dropdown.css') }}" />
  <link rel="stylesheet" href="{{ url_for('static', filename='css/welcome.css') }}" />
  <link id="theme-stylesheet" rel="stylesheet" href="{{ url_for('static', filename='css/themes/' + theme + '.css') }}">
  <script src="https://cdn.quilljs.com/1.3.6/quill.min.js"></script>
  <script src="{{ url_for('static', filename='js/journal.js') }}" defer></script>
  <script>
    async function deleteEntry(entryId) {
      if (confirm("Are you sure you want to delete this journal entry?")) {
        try {
          const response = await fetch(`/delete_entry/${entryId}`, {
            method: 'DELETE',
          });
          if (response.ok) {
            document.getElementById(`entry-${entryId}`).remove();
            alert("Journal entry deleted successfully!");
          } else {
            alert("Failed to delete journal entry. Please try again.");
          }
        } catch (error) {
          console.error("Error deleting entry:", error);
          alert("An error occurred while deleting the entry. Please try again.");
        }
      }
    }
  </script>
</head>
<body>
  <div class="sidebar">
    <div class="logo">
      <i class="ri-brain-line"></i>
      <h1>Neuro<span>Aid</span></h1>
    </div>
    <nav>
      <a href="{{ url_for('index') }}"><i class="ri-home-5-line"></i> Home</a>
      <a href="{{ url_for('journal') }}" class="active"><i class="ri-booklet-line"></i> Journal</a>
      <a href="{{ url_for('progress') }}"><i class="ri-bar-chart-2-line"></i> Progress</a>
      <a href="{{ url_for('vibe') }}"><i class="ri-music-2-line"></i> Vibe</a>
      <a href="{{ url_for('gratitude') }}"><i class="ri-heart-line"></i> Gratitude</a>
      <a href="{{ url_for('settings')}}"><i class="ri-settings-3-line"></i> Settings</a>
      <a href="{{ url_for('profile') }}"><i class="ri-user-line"></i> Profile</a>
      <a href="{{ url_for('logout') }}"><i class="ri-logout-box-line"></i> Logout</a>
    </nav>
  </div>

  <div class="wrapper">
    <main class="main-content">
      <header>
        <div class="welcome-container">
          <div class="welcome-text">Welcome to NeuroAid, {{ user_name }}</div>
          <div class="quote-text"></div>
        </div>
        <div class="profile-dropdown">
          <div class="profile">
            <img src="https://randomuser.me/api/portraits/men/32.jpg" alt="Profile" />
            <span>{{ session.get('user_email', 'User').split('@')[0] }}</span>
            <i class="ri-arrow-down-s-line"></i>
          </div>
          <div class="dropdown-content">
          <div class="user-info">
            <p><i class="ri-user-line"></i> {{ user_name }}</p>
            <p><i class="ri-mail-line"></i> {{ user_email }}</p>
            <p><i class="ri-calendar-line"></i> Joined: {{ joined_date }}</p>
          </div>
          <a href="{{ url_for('profile') }}"><i class="ri-user-line"></i> Profile</a>
          <a href="{{ url_for('settings') }}"><i class="ri-settings-3-line"></i> Settings</a>
          <a href="{{ url_for('logout') }}"><i class="ri-logout-box-line"></i> Logout</a>
          </div>
        </div>
      </header>

      <section class="journal-section">
        {% if error %}
          <div class="error-message" style="color: #b71c1c; background-color: #ffebee; padding: 10px; border-radius: 5px; margin-bottom: 20px;">
            {{ error }}
          </div>
        {% endif %}
        <div class="journal-header">
          <h2><i class="ri-booklet-line"></i> Your Daily Journal</h2>
          <p>Write freely and reflect on your day to boost self-awareness.</p>
          <div class="journal-meta">
            <span class="date">{{ current_date }}</span>
            <span class="word-count">0 words</span>
          </div>
        </div>

        <form id="journal-form" method="POST" action="{{ url_for('journal') }}">
          <div id="editor"></div>
          <input type="hidden" name="content" id="journal-content">
          <div class="journal-actions">
            <button type="submit" class="neuroaid-btn"><i class="ri-save-line"></i> Save Entry</button>
          </div>
        </form>

        {% if entries %}
          <div class="entries-section">
            <h3 style="color: #2d2d2d; margin-top: 40px; margin-bottom: 20px; font-size:28px;">Your Journal Entries</h3>
            <div class="entries-list">
              {% for entry in entries %}
                <div class="entry-card" id="entry-{{ entry.id }}" style="background-color: #f4f0fa; padding: 15px; border-radius: 8px; margin-bottom: 15px; box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);">
                  <div class="entry-meta" style="display: flex; justify-content: space-between; font-size: 20px; color: #7c3aed; margin-bottom: 10px;">
                    <span>{{ entry.created_at }}</span>
                    <button onclick="deleteEntry('{{ entry.id }}')" style="background: none; border: none; cursor: pointer; padding-top:10px; padding-left:10px;color: #b71c1c;">
                      <i class="ri-delete-bin-line"></i>
                    </button>
                  </div>
                  <div class="entry-content" style="color: #2d2d2d; font-size:18px;">{{ entry.content | safe }}</div>
                </div>
              {% endfor %}
            </div>
          </div>
        {% endif %}
      </section>
    </main>

    <footer>  
      <span>© 2025 NeuroAid. Your mental health companion.</span>
    </footer>
  </div>
  <script src="{{ url_for('static', filename='js/dropdown.js') }}"></script>
  <script src="{{ url_for('static', filename='js/welcome.js') }}"></script>
</body>
</html>
```

# File: templates/login.html
```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>NeuroAid - Login</title>

  <!-- Link to CSS file -->
  <link rel="stylesheet" href="{{ url_for('static', filename='css/signup.css') }}" />

  <!-- Google Fonts link to use the 'Poppins' font family -->
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap" rel="stylesheet">
</head>
<body>
  
  <!-- Main container for the login page -->
  <div class="login-container">
    <!-- Branding section left side -->
    <div class="branding">
      <!-- Branding content to be added (img) -->
    </div>

    <!-- Login box containing the form right side -->
    <div class="login-box">
      <h1>Neuro<span>Aid</span></h1>
      <p>"Your personal mental health companion"</p>
      <h2>Login</h2>

      <!-- Display error message if login fails -->
      {% if error %}
        <p style="color: red; text-align: center;">{{ error }}</p>
      {% endif %}

      <!-- Login form -->
      <form id="login-form" method="POST" action="{{ url_for('login') }}">
        <!-- Input field for the username -->
        <div class="input-group">
          <input type="text" name="email" id="email" required placeholder=" " />
          <label for="email">Email</label>
        </div>

        <!-- Input field for the password -->
        <div class="input-group">
          <input type="password" name="password" id="password" required placeholder=" " />
          <label for="password">Password</label>
        </div>

        <!-- Login button -->
        <button type="submit">Login</button>
      </form>

      <!-- Link to sign up page -->
      <div class="signup-link">
        Don't have an account? <a href="/signup">Sign up!</a>
      </div>
    </div>
  </div>
</body>
</html>
```

# File: templates/profile.html
```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>NeuroAid - Profile</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/remixicon@4.3.0/fonts/remixicon.css" />
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="{{ url_for('static', filename='css/dashboard.css') }}" />
  <link rel="stylesheet" href="{{ url_for('static', filename='css/profile.css') }}" />
  <link rel="stylesheet" href="{{ url_for('static', filename='css/dropdown.css') }}" />
  <link rel="stylesheet" href="{{ url_for('static', filename='css/welcome.css') }}" />
  <link id="theme-stylesheet" rel="stylesheet" href="{{ url_for('static', filename='css/themes/' + theme + '.css') }}">
  <script src="{{ url_for('static', filename='js/utils.js') }}" defer></script>
  <script src="{{ url_for('static', filename='js/profile.js') }}" defer></script>
</head>
<body>
  <div class="sidebar">
    <div class="logo">
      <i class="ri-brain-line"></i>
      <h1>Neuro<span>Aid</span></h1>
    </div>
    <nav>
      <a href="{{ url_for('index') }}"><i class="ri-home-5-line"></i> Home</a>
      <a href="{{ url_for('journal') }}"><i class="ri-booklet-line"></i> Journal</a>
      <a href="{{ url_for('progress') }}"><i class="ri-bar-chart-2-line"></i> Progress</a>
      <a href="{{ url_for('vibe') }}"><i class="ri-music-2-line"></i> Vibe</a>
      <a href="{{ url_for('gratitude') }}"><i class="ri-heart-line"></i> Gratitude</a>
      <a href="{{ url_for('settings') }}"><i class="ri-settings-3-line"></i> Settings</a>
      <a href="{{ url_for('profile') }}" class="active"><i class="ri-user-line"></i> Profile</a>
      <a href="{{ url_for('logout') }}"><i class="ri-logout-box-line"></i> Logout</a>
    </nav>
  </div>

  <div class="wrapper">
    <main class="main-content">
      <header>
        <div class="welcome-container">
          <div class="welcome-text">Welcome to NeuroAid, {{ user_name }}</div>
          <div class="quote-text"></div>
        </div>
        <div class="profile-dropdown">
          <div class="dropdown-content">
            <div class="user-info">
              <p><i class="ri-user-line"></i> {{ user_name }}</p>
              <p><i class="ri-mail-line"></i> {{ user_email }}</p>
              <p><i class="ri-calendar-line"></i> Joined: {{ joined_date }}</p>
            </div>
            <a href="{{ url_for('profile') }}"><i class="ri-user-line"></i> Profile</a>
            <a href="{{ url_for('settings') }}"><i class="ri-settings-3-line"></i> Settings</a>
            <a href="{{ url_for('logout') }}"><i class="ri-logout-box-line"></i> Logout</a>
          </div>
        </div>
      </header>

      <section class="profile-section">
        <div class="profile-header">
          <h2>Your Profile</h2>
          <p>Complete your profile to personalize your NeuroAid experience and get the most out of your mental health journey.</p>
          <div class="progress-container">
            <div class="progress-circle">
              <svg class="progress-ring" width="100" height="100">
                <circle class="progress-ring__background"
                  cx="50"
                  cy="50"
                  r="44"
                  fill="none"
                  stroke-width="10"
                  stroke="#e9ecef"
                  stroke-linecap="round"/>
                <circle class="progress-ring__circle"
                  cx="50"
                  cy="50"
                  r="44"
                  fill="none"
                  stroke-width="10"
                  stroke="#2c2c2c"
                  stroke-linecap="round"
                  transform="rotate(-90, 50, 50)"
                  style="stroke-dasharray: {{ completion_dasharray }} 276.46;"/>
              </svg>
              <span class="progress-text">{{ completion_percentage }}% Complete</span>
            </div>
          </div>
        </div>

        <div class="card profile-overview">
          <div class="card-header">
            <h3>Profile Overview</h3>
            <p class="status-indicator {{ 'complete' if name != 'Unknown' and email != 'Not found' and username != '@unknown' else 'incomplete' }}">Basic Info: {{ 'Complete' if name != 'Unknown' and email != 'Not found' and username != '@unknown' else 'Incomplete' }}</p>
          </div>
          <div class="profile-content">
            <div class="profile-picture">
              <img src="{{ profile_data.profile_pic_url if profile_data.get('profile_pic_url') else 'https://randomuser.me/api/portraits/men/32.jpg' }}" alt="Profile Picture" id="profile-pic" />
              <button class="edit-button" id="edit-picture-btn">Upload Photo</button>
              <input type="file" id="profile-pic-input" accept="image/*" style="display: none;" />
            </div>
            <div class="form-container">
              <div class="form-field">
                <label for="name-input">Name</label>
                <div class="input-container">
                  <input type="text" id="name-input" value="{{ name }}" disabled aria-label="Name" />
                  <button class="edit-field-btn" data-field="name">Edit</button>
                </div>
              </div>
              <div class="form-field">
                <label for="email-input">Email</label>
                <div class="input-container">
                  <input type="email" id="email-input" value="{{ email }}" disabled aria-label="Email" />
                  <button class="edit-field-btn" data-field="email">Edit</button>
                </div>
              </div>
              <div class="form-field">
                <label for="username-input">Username</label>
                <div class="input-container">
                  <input type="text" id="username-input" value="{{ username }}" disabled aria-label="Username" />
                  <button class="edit-field-btn" data-field="username">Edit</button>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div class="card personal-details">
          <div class="card-header">
            <h3>Personal Details</h3>
            <p class="status-indicator {{ 'complete' if profile_data.age or profile_data.gender or profile_data.location or profile_data.preferred_language else 'incomplete' }}">Personal Details: {{ 'Complete' if profile_data.age or profile_data.gender or profile_data.location or profile_data.preferred_language else 'Not Started' }}</p>
          </div>
          <div class="form-container">
            <div class="form-field">
              <label for="age-input">Age (Optional)</label>
              <div class="input-container">
                <input type="number" id="age-input" value="{{ profile_data.age if profile_data.age else '' }}" placeholder="Enter your age" aria-label="Age" />
              </div>
            </div>
            <div class="form-field">
              <label for="gender-input">Gender</label>
              <div class="input-container">
                <select id="gender-input" aria-label="Gender">
                  <option value="" {{ 'selected' if not profile_data.gender }}>Select Gender</option>
                  <option value="male" {{ 'selected' if profile_data.gender == 'male' }}>Male</option>
                  <option value="female" {{ 'selected' if profile_data.gender == 'female' }}>Female</option>
                  <option value="non-binary" {{ 'selected' if profile_data.gender == 'non-binary' }}>Non-binary</option>
                  <option value="prefer-not-to-say" {{ 'selected' if profile_data.gender == 'prefer-not-to-say' }}>Prefer not to say</option>
                </select>
              </div>
            </div>
            <div class="form-field">
              <label for="location-input">Location (Optional)</label>
              <div class="input-container">
                <input type="text" id="location-input" value="{{ profile_data.location if profile_data.location else '' }}" placeholder="Enter your city/country" aria-label="Location" />
              </div>
            </div>
            <div class="form-field">
              <label for="language-input">Preferred Language</label>
              <div class="input-container">
                <select id="language-input" aria-label="Preferred Language">
                  <option value="" {{ 'selected' if not profile_data.preferred_language }}>Select Language</option>
                  <option value="english" {{ 'selected' if profile_data.preferred_language == 'english' }}>English</option>
                  <option value="spanish" {{ 'selected' if profile_data.preferred_language == 'spanish' }}>Spanish</option>
                  <option value="french" {{ 'selected' if profile_data.preferred_language == 'french' }}>French</option>
                </select>
              </div>
            </div>
            <div class="form-actions">
              <button class="save-btn" id="save-personal-details">Save</button>
            </div>
          </div>
        </div>

        <div class="card mental-health-goals">
          <div class="card-header">
            <h3>Your Mental Health Goals</h3>
            <p class="status-indicator {{ 'complete' if profile_data.primary_goal or profile_data.engagement_frequency or profile_data.preferred_activities else 'incomplete' }}">Goals: {{ 'Complete' if profile_data.primary_goal or profile_data.engagement_frequency or profile_data.preferred_activities else 'Not Started' }}</p>
          </div>
          <div class="form-container">
            <div class="form-field">
              <label for="primary-goal">Primary Goal</label>
              <div class="input-container">
                <select id="primary-goal" aria-label="Primary Goal">
                  <option value="" {{ 'selected' if not profile_data.primary_goal }}>Select Goal</option>
                  <option value="reduce-stress" {{ 'selected' if profile_data.primary_goal == 'reduce-stress' }}>Reduce Stress</option>
                  <option value="improve-sleep" {{ 'selected' if profile_data.primary_goal == 'improve-sleep' }}>Improve Sleep</option>
                  <option value="manage-anxiety" {{ 'selected' if profile_data.primary_goal == 'manage-anxiety' }}>Manage Anxiety</option>
                  <option value="build-mindfulness" {{ 'selected' if profile_data.primary_goal == 'build-mindfulness' }}>Build Mindfulness</option>
                </select>
              </div>
            </div>
            <div class="form-field">
              <label for="frequency">Engagement Frequency</label>
              <div class="input-container">
                <select id="frequency" aria-label="Engagement Frequency">
                  <option value="" {{ 'selected' if not profile_data.engagement_frequency }}>Select Frequency</option>
                  <option value="daily" {{ 'selected' if profile_data.engagement_frequency == 'daily' }}>Daily</option>
                  <option value="weekly" {{ 'selected' if profile_data.engagement_frequency == 'weekly' }}>Weekly</option>
                  <option value="biweekly" {{ 'selected' if profile_data.engagement_frequency == 'biweekly' }}>Bi-weekly</option>
                </select>
              </div>
            </div>
            <div class="form-field">
              <label>Preferred Activities</label>
              <div class="checkbox-container">
                <div class="checkbox-option">
                  <input type="checkbox" id="journaling" name="activities" value="journaling" {{ 'checked' if 'journaling' in profile_data.preferred_activities }} aria-label="Journaling" />
                  <label for="journaling">Journaling</label>
                </div>
                <div class="checkbox-option">
                  <input type="checkbox" id="mood-speech" name="activities" value="mood-speech" {{ 'checked' if 'mood-speech' in profile_data.preferred_activities }} aria-label="Mood Speech" />
                  <label for="mood-speech">Mood Speech</label>
                </div>
                <div class="checkbox-option">
                  <input type="checkbox" id="mindfulness" name="activities" value="mindfulness" {{ 'checked' if 'mindfulness' in profile_data.preferred_activities }} aria-label="Mindfulness Exercises" />
                  <label for="mindfulness">Mindfulness Exercises</label>
                </div>
              </div>
            </div>
            <div class="form-actions">
              <button class="save-btn" id="save-goals">Save</button>
            </div>
          </div>
        </div>
        <div class="cta-message">
          <p>Complete your profile to unlock personalized features! Add your mental health goals to continue.</p>
        </div>
      </section>
    </main>   

    <footer>
      <span>© 2025 NeuroAid.</span>
    </footer>
  </div>
  <script src="{{ url_for('static', filename='js/dropdown.js') }}"></script>
  <script src="{{ url_for('static', filename='js/welcome.js') }}"></script>
</body>
</html>
```

# File: templates/progress.html
```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>NeuroAid - Progress</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/remixicon@4.3.0/fonts/remixicon.css" />
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="{{ url_for('static', filename='css/dashboard.css') }}" />
  <link rel="stylesheet" href="{{ url_for('static', filename='css/progress.css') }}" />
  <link rel="stylesheet" href="{{ url_for('static', filename='css/dropdown.css') }}" />
  <link rel="stylesheet" href="{{ url_for('static', filename='css/welcome.css') }}" />
  <link id="theme-stylesheet" rel="stylesheet" href="{{ url_for('static', filename='css/themes/' + theme + '.css') }}">
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
  <div class="app-container">
    <div class="sidebar">
      <div class="logo">
        <i class="ri-brain-line"></i>
        <h1>Neuro<span>Aid</span></h1>
      </div>
      <nav>
        <a href="{{ url_for('index') }}"><i class="ri-home-5-line"></i> Home</a>
        <a href="{{ url_for('journal') }}"><i class="ri-booklet-line"></i> Journal</a>
        <a href="{{ url_for('progress') }}" class="active"><i class="ri-bar-chart-2-line"></i> Progress</a>
        <a href="{{ url_for('vibe') }}"><i class="ri-music-2-line"></i> Vibe</a>
        <a href="{{ url_for('gratitude') }}"><i class="ri-heart-line"></i> Gratitude</a>
        <a href="{{ url_for('settings')}}"><i class="ri-settings-3-line"></i> Settings</a>
        <a href="{{ url_for('profile') }}"><i class="ri-user-line"></i> Profile</a>
        <a href="{{ url_for('logout') }}"><i class="ri-logout-box-line"></i> Logout</a>
      </nav>
    </div>

    <div class="wrapper">
      <main class="main-content">
        <header>
          <div class="welcome-container">
            <div class="welcome-text">Welcome to NeuroAid, {{ user_name }}</div>
            <div class="quote-text"></div>
          </div>
          <div class="profile-dropdown">
            <div class="profile">
              <img src="https://randomuser.me/api/portraits/men/32.jpg" alt="Profile" id="header-profile-pic" />
              <span>{{ session.get('user_email', 'User').split('@')[0] }}</span>
              <i class="ri-arrow-down-s-line"></i>
            </div>
            <div class="dropdown-content">
              <div class="user-info">
                <p><i class="ri-user-line"></i> {{ user_name }}</p>
                <p><i class="ri-mail-line"></i> {{ user_email }}</p>
                <p><i class="ri-calendar-line"></i> Joined: {{ joined_date }}</p>
              </div>
              <a href="{{ url_for('profile') }}"><i class="ri-user-line"></i> Profile</a>
              <a href="{{ url_for('settings') }}"><i class="ri-settings-3-line"></i> Settings</a>
              <a href="{{ url_for('logout') }}"><i class="ri-logout-box-line"></i> Logout</a>
            </div>
          </div>
        </header>

        <section class="stats-section">
          <h2><i class="ri-bar-chart-2-line"></i> Your Progress</h2>
          <div class="stats-boxes">
            <div class="stat-box">
              <i class="ri-calendar-line"></i>
              <div>
                <h3>Journaling Streak</h3>
                <p><strong id="streak-value">7 Days</strong></p>
              </div>
            </div>
            <div class="stat-box">
              <i class="ri-booklet-line"></i>
              <div>
                <h3>Total Entries</h3>
                <p><strong id="entries-count">10 entries</strong></p>
              </div>
            </div>
            <div class="stat-box">
              <i class="ri-emotion-happy-line"></i>
              <div>
                <h3>Average Mood</h3>
                <p><strong>Positive</strong></p>
              </div>
            </div>
          </div>
        </section>

        <section class="chart-section">
          <h2><i class="ri-line-chart-line"></i> Mood Over Time</h2>
          <div class="chart-card">
            <canvas id="moodChart"></canvas>
          </div>
        </section>

        <section class="chart-section">
          <h2><i class="ri-line-chart-line"></i> Confidence Over Time</h2>
          <div class="chart-card">
            <canvas id="confidenceChart"></canvas>
          </div>
        </section>
      </main>

      <footer>
        <span>© 2025 NeuroAid. Your mental health companion.</span>
      </footer>
    </div>
  </div>
  <script src="{{ url_for('static', filename='js/progress.js') }}"></script>
  <script src="{{ url_for('static', filename='js/dropdown.js') }}"></script>
  <script src="{{ url_for('static', filename='js/welcome.js') }}"></script>
</body>
</html>
```

# File: templates/settings.html
```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>NeuroAid - Settings</title>
  <!-- Remix Icons -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/remixicon@4.3.0/fonts/remixicon.css" />
  <!-- Google Fonts -->
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
  <!-- Link to external CSS -->
  <link rel="stylesheet" href="{{ url_for('static', filename='css/dashboard.css') }}" />
  <link rel="stylesheet" href="{{ url_for('static', filename='css/settings.css') }}" />
  <link rel="stylesheet" href="{{ url_for('static', filename='css/dropdown.css') }}" />
  <link rel="stylesheet" href="{{ url_for('static', filename='css/welcome.css') }}" />
  <!-- Dynamic Theme -->
  <link id="theme-stylesheet" rel="stylesheet" href="{{ url_for('static', filename='css/themes/' + theme + '.css') }}">
</head>
<body>
  <div class="sidebar">
    <div class="logo">
      <i class="ri-brain-line"></i>
      <h1>Neuro<span>Aid</span></h1>
    </div>
    <nav>
      <a href="{{ url_for('index') }}"><i class="ri-home-5-line"></i> Home</a>
      <a href="{{ url_for('journal') }}"><i class="ri-booklet-line"></i> Journal</a>
      <a href="{{ url_for('progress') }}"><i class="ri-bar-chart-2-line"></i> Progress</a>
      <a href="{{ url_for('vibe') }}"><i class="ri-music-2-line"></i> Vibe</a>
      <a href="{{ url_for('gratitude') }}"><i class="ri-heart-line"></i> Gratitude</a>
      <a href="{{ url_for('settings') }}" class="active"><i class="ri-settings-3-line"></i> Settings</a>
      <a href="{{ url_for('profile') }}"><i class="ri-user-line"></i> Profile</a>
      <a href="{{ url_for('logout') }}"><i class="ri-logout-box-line"></i> Logout</a>
    </nav>
  </div>

  <div class="wrapper">
    <main class="main-content">
      <header>
        <div class="welcome-container">
          <div class="welcome-text">Welcome to NeuroAid, {{ user_name }}</div>
          <div class="quote-text"></div>
        </div>
        <div class="profile-dropdown">
          <div class="profile">
            <img src="{{ profile_data.profile_pic_url if profile_data.get('profile_pic_url') else 'https://randomuser.me/api/portraits/men/32.jpg' }}" alt="Profile" id="header-profile-pic" />
            <span>{{ session.get('user_email', 'User').split('@')[0] }}</span>
            <i class="ri-arrow-down-s-line"></i>
          </div>
          <div class="dropdown-content">
            <div class="user-info">
              <p><i class="ri-user-line"></i> {{ user_name }}</p>
              <p><i class="ri-mail-line"></i> {{ user_email }}</p>
              <p><i class="ri-calendar-line"></i> Joined: {{ joined_date }}</p>
            </div>
            <a href="{{ url_for('profile') }}"><i class="ri-user-line"></i> Profile</a>
            <a href="{{ url_for('settings') }}"><i class="ri-settings-3-line"></i> Settings</a>
            <a href="{{ url_for('logout') }}"><i class="ri-logout-box-line"></i> Logout</a>
          </div>
        </div>
      </header>

      <section class="settings-section">
        <h2><i class="ri-settings-3-line"></i> Settings</h2>

        <!-- Success/Error Messages -->
        {% if error %}
          <div class="error-message" style="background-color: #fee2e2; color: #dc2626; padding: 15px; border-radius: 8px; margin-bottom: 20px; font-size: 1rem;">
            {{ error }}
          </div>
        {% endif %}
        {% if success %}
          <div class="success-message" style="background-color: #d1fae5; color: #10b981; padding: 15px; border-radius: 8px; margin-bottom: 20px; font-size: 1rem;">
            {{ success }}
          </div>
        {% endif %}

        <!-- Settings Form -->
        <div class="settings-card">
          <form id="settings-form" method="POST" action="{{ url_for('settings') }}">
            <!-- Account Settings -->
            <div class="settings-group">
              <h3><i class="ri-user-settings-line"></i> Account Settings</h3>
              <div class="form-group">
                <label for="email">Email</label>
                <input type="email" id="email" name="email" value="{{ email }}" placeholder="Enter new email (optional)">
              </div>
              <div class="form-group">
                <label for="password">New Password</label>
                <input type="password" id="password" name="password" placeholder="Enter new password (optional)">
              </div>
              <div class="form-group">
                <label for="confirm_password">Confirm New Password</label>
                <input type="password" id="confirm_password" name="confirm_password" placeholder="Confirm new password">
              </div>
            </div>

            <!-- Security Settings -->
            <div class="settings-group">
              <h3><i class="ri-shield-check-line"></i> Security Settings</h3>
              <div class="form-group toggle-group">
                <label for="two_factor_enabled">Enable Two-Factor Authentication</label>
                <div class="toggle-wrapper">
                  <input type="checkbox" id="two_factor_enabled" name="two_factor_enabled" {% if two_factor_enabled %}checked{% endif %}>
                  <span class="toggle-slider"></span>
                </div>
              </div>
            </div>

            <!-- Appearance Settings -->
            <div class="settings-group">
              <h3><i class="ri-paint-brush-line"></i> Appearance Settings</h3>
              <div class="form-group">
                <label for="theme">App Theme</label>
                <select id="theme" name="theme">
                  <option value="light" {% if theme == 'light' %}selected{% endif %}>Light</option>
                  <option value="dark" {% if theme == 'dark' %}selected{% endif %}>Dark</option>
                  <option value="calming" {% if theme == 'calming' %}selected{% endif %}>Calming</option>
                </select>
              </div>
            </div>

            <!-- Notification Settings -->
            <div class="settings-group">
              <h3><i class="ri-notification-3-line"></i> Notification Settings</h3>
              <div class="form-group">
                <label for="reminder_time">Daily Reminder Time</label>
                <input type="time" id="reminder_time" name="reminder_time" value="{{ reminder_time }}">
              </div>
              <div class="form-group">
                <label for="notification_preference">Notification Preference</label>
                <select id="notification_preference" name="notification_preference">
                  <option value="email" {% if notification_preference == 'email' %}selected{% endif %}>Email</option>
                  <option value="push" {% if notification_preference == 'push' %}selected{% endif %}>Push</option>
                </select>
              </div>
            </div>

            <button type="submit" class="neuroaid-btn"><i class="ri-save-line"></i> Save Changes</button>
          </form>
        </div>

        <!-- Privacy & Security -->
        <div class="settings-card">
          <div class="settings-group">
            <h3><i class="ri-lock-line"></i> Privacy & Security</h3>
            <div class="action-group">
              <button type="button" class="action-btn" id="export-data-btn">Export Data</button>
              <button type="button" class="action-btn delete" id="delete-account-btn">Delete Account</button>
            </div>
          </div>
        </div>
      </section>
    </main>

    <footer>
      <span>© 2025 NeuroAid. Your mental health companion.</span>
    </footer>
  </div>
  <script src="{{ url_for('static', filename='js/settings.js') }}"></script>
  <script src="{{ url_for('static', filename='js/dropdown.js') }}"></script>
  <script src="{{ url_for('static', filename='js/welcome.js') }}"></script>
</body>
</html>
```

# File: templates/setup_2fa.html
```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>NeuroAid - Setup 2FA</title>
  <link rel="stylesheet" href="{{ url_for('static', filename='css/setup_2fa.css') }}" />
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap" rel="stylesheet">
</head>
<body>
  <div class="login-container">
    <div class="branding">
      <h1>Neuro<span>Aid</span></h1>
    </div>
    <div class="login-box">
      <h2>Setup Two-Factor Authentication</h2>
      {% if error %}
        <p class="error">{{ error }}</p>
      {% endif %}
      {% if qr_code %}
        <p>Scan this QR code with your authenticator app (e.g., Google Authenticator):</p>
        <div class="qr-container">
          <img src="data:image/png;base64,{{ qr_code }}" alt="2FA QR Code" />
        </div>
        <p>Or enter this secret key manually:</p>
        <div class="secret-code">{{ secret }}</div>
        <p>Once set up, return to the <a href="{{ url_for('verify_2fa') }}">verification page</a>.</p>
      {% else %}
        <form method="POST" action="{{ url_for('setup_2fa') }}">
          <p class="abc">Click below to generate a QR code for your authenticator app.</p>
          <button type="submit">Generate QR Code</button>
        </form>
      {% endif %}
    </div>
  </div>
</body>
</html>
```

# File: templates/signup.html
```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>NeuroAid - Sign Up</title>
  <link rel="stylesheet" href="{{ url_for('static', filename='css/signup.css') }}" />
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap" rel="stylesheet">
</head>
<body>
  <!-- Main container for the login page -->
  <div class="login-container">
    <div class="branding">
    </div>
    <div class="login-box">
      <h1>Neuro<span>Aid</span></h1>
      <p>"Your personal mental health companion"</p>
      <h2>Signup</h2>

      <!-- Display error message if signup fails -->
      {% if error %}
        <p style="color: red; text-align: center;">{{ error }}</p>
      {% endif %}

      <!-- Signup form -->
      <form id="signup-form" method="POST" action="{{ url_for('signup') }}">
        <div class="input-group">
          <input type="text" name="email" id="email" required placeholder=" " />
          <label for="email">Email</label>
        </div>
        <!-- Input field for the password -->
        <div class="input-group">
          <input type="password" name="password" id="password" required placeholder=" " />
          <label for="password">Password</label>
        </div>
        <div class="input-group">
          <input type="password" name="confirm_password" id="confirm-password" required placeholder=" " />
          <label for="confirm-password">Confirm Password</label>
        </div>

        <button type="submit">Signup</button>
      </form>
      <div class="login-link">
        Already have an account? <a href="{{ url_for('login') }}">Login!</a>
      </div>
    </div>
  </div>
</body>
</html>
```

# File: templates/verify_2fa.html
```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>NeuroAid - Verify 2FA</title>
  <link rel="stylesheet" href="{{ url_for('static', filename='css/signup.css') }}" />
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap" rel="stylesheet">
</head>
<body>
  <div class="login-container">
    <div class="branding"></div>
    <div class="login-box">
      <h1>Neuro<span>Aid</span></h1>
      <h2>Verify Two-Factor Authentication</h2>
      {% if error %}
        <p style="color: red; text-align: center;">{{ error }}</p>
      {% endif %}
      <form method="POST" action="{{ url_for('verify_2fa') }}">
        <div class="input-group">
          <input type="text" name="code" id="code" required placeholder=" " />
          <label for="code">Enter 2FA Code</label>
        </div>
        <button type="submit">Verify</button>
      </form>
    </div>
  </div>
</body>
</html>
```

# File: templates/vibe.html
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>NeuroAid - Vibe</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/remixicon@4.3.0/fonts/remixicon.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/dashboard.css') }}">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/vibe.css') }}">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/dropdown.css') }}" />
  <link rel="stylesheet" href="{{ url_for('static', filename='css/welcome.css') }}" />
    <link id="theme-stylesheet" rel="stylesheet" href="{{ url_for('static', filename='css/themes/' + theme + '.css') }}">
</head>
<body>
    <div class="app-container">
        <aside class="sidebar">
            <div class="logo">
                <i class="ri-brain-line" aria-hidden="true"></i>
                <h1>Neuro<span>Aid</span></h1>
            </div>
            <nav aria-label="Main navigation">
                <a href="{{ url_for('index') }}"><i class="ri-home-5-line" aria-hidden="true"></i> Home</a>
                <a href="{{ url_for('journal') }}"><i class="ri-booklet-line" aria-hidden="true"></i> Journal</a>
                <a href="{{ url_for('progress') }}"><i class="ri-bar-chart-2-line" aria-hidden="true"></i> Progress</a>
                <a href="{{ url_for('vibe') }}" class="active" aria-current="page"><i class="ri-music-2-line" aria-hidden="true"></i> Vibe</a>
                <a href="{{ url_for('gratitude') }}"><i class="ri-heart-line" aria-hidden="true"></i> Gratitude</a>
                <a href="{{ url_for('settings') }}"><i class="ri-settings-3-line" aria-hidden="true"></i> Settings</a>
                <a href="{{ url_for('profile') }}"><i class="ri-user-line" aria-hidden="true"></i> Profile</a>
                <a href="{{ url_for('logout') }}"><i class="ri-logout-box-line" aria-hidden="true"></i> Logout</a>
            </nav>
        </aside>

        <div class="wrapper">
            <main class="main-content" role="main">
                <header class="main-header">
                    <div class="welcome-container">
                    <div class="welcome-text">Welcome to NeuroAid, {{ user_name }}</div>
                    <div class="quote-text"></div>
                    </div>
                <div class="profile-dropdown">
                <div class="profile">
                    <img src="https://randomuser.me/api/portraits/men/32.jpg" alt="Profile" />
                    <span>{{ session.get('user_email', 'User').split('@')[0] }}</span>
                    <i class="ri-arrow-down-s-line"></i>
                    <div class="dropdown-content">
                    <div class="user-info">
                        <p><i class="ri-user-line"></i> {{ user_name }}</p>
                        <p><i class="ri-mail-line"></i> {{ user_email }}</p>
                        <p><i class="ri-calendar-line"></i> Joined: {{ joined_date }}</p>
                    </div>
                    <a href="{{ url_for('profile') }}"><i class="ri-user-line"></i> Profile</a>
                    <a href="{{ url_for('settings') }}"><i class="ri-settings-3-line"></i> Settings</a>
                    <a href="{{ url_for('logout') }}"><i class="ri-logout-box-line"></i> Logout</a>
                    </div>
          </div>
                </header>

                <section class="music-recommendations-section" aria-labelledby="music-recommendations-title">
                    <h2 id="music-recommendations-title"><i class="ri-music-2-line" aria-hidden="true"></i> Music Recommendations</h2>
                    <div class="selector-group">
                        <label for="language-select">Select Language:</label>
                        <select id="language-select" aria-label="Select music language">
                            <option value="tamil">Tamil</option>
                            <option value="telugu">Telugu</option>
                            <option value="malayalam">Malayalam</option>
                            <option value="english">English</option>
                        </select>
                    </div>
                    <div class="music-box" id="spotify-player" role="region" aria-live="polite">
                        <h3>Now Playing</h3>
                        <p>Loading your personalized playlist...</p>
                    </div>
                </section>
            </main>

            <footer>
                <span>© 2025 NeuroAid. Your mental health companion.</span>
            </footer>
        </div>
    </div>

    <script src="{{ url_for('static', filename='js/welcome.js') }}"></script>
    <script src="{{ url_for('static', filename='js/vibe.js') }}"></script>
    <script src="{{ url_for('static', filename='js/dropdown.js') }}"></script>
</body>
</html>
```

